ggplot(variants[variants$colourName %in% c("red","brown"),],
aes(x=indexical,y=freq_week_4)) + geom_violin()
ggplot(variants[variants$colourName %in% c("red","brown"),],
aes(x=indexical,y=freq_week_4)) + geom_violin() +
xlab("Indexicaltiy") +
ylab("Final week frequency")
ggplot(variants[variants$colourName %in% c("red","brown"),],
aes(x=indexical,y=freq_week_4)) + geom_violin() +
xlab("Indexicaltiy") +
ylab("Final week frequency") +
ggtitle("Data for RED and BROWN")
pdf("../results/descriptive/graphs/Indexicality_RedBrown.pdf",
width=4.5,height=4)
ggplot(variants[variants$colourName %in% c("red","brown"),],
aes(x=indexical,y=freq_week_4)) + geom_violin() +
xlab("Indexicaltiy") +
ylab("Final week frequency") +
ggtitle("Data for RED and BROWN")
dev.off()
---
title: "Colour experiment"
output:
pdf_document:
latex_engine: xelatex
toc: yes
---
\newpage
# Introduction
This analysis looks at the sign variants used in a colour naming game between signers of different sign languages meeting after 1 week of interaction and after 3 weeks of interaction.  The data was collected by Kang Suk Byun (Kang-Suk.Byun@mpi.nl).
The analysis tries to predict the relative frequency of each variant within a colour category in week 3, based on measures from week 1.
## Data
-  colour: Code of the target colour
-  colourName: English name of the target colour
-  sign: label for the variant produced
-  freq_week_1_total: Total number of occurances of the variant in the first week, across all colour contexts.
-  freq_week_4_total: Total number of occurances of the variant in the final week, across all colour contexts.
-  freq_week_1: Number of occurances of the variant used during the given target colour context in week 1.
-  freq_week_4: Number of occurances of the variant used during the given target colour context in the final week.
-  prop_week_1: Same as freq_week_1, but as a proportion of all variants used in the given colour context.
-  prop_week_4: Same as freq_week_4, but as a proportion of all variants used in the given colour context.
-  origin:  The origin language of the sign.  For many, identifying an origin is not possible, so is labelled "None"
-  iconic: Old variable
-  check: The number of times this variable was used in a checking turn.
-  indexical:  Is the variant non-indexical, indexical or indexical of the body?
-  inventedBy:  The name of the first signer to use this variant in the experiment.
-  TryMarked:  The number of times this sign was used in try-marking.
-  Teach:  The number of times this sign was explicitly taught.
-  averageLength_week_1:  Average time to produce the variant in milliseconds
-  averageTrialLength_week_1:  Average time for completing the trial for the given target colour.
-  BodyAnchor:  Is the variant body-anchored (redundant with 'indexical')
\newpage
## Poisson regression
This study uses a mixed effects regression model with poisson distributions.  Most standard regression analyses assume that the values they are trying to model come from a normal distribution, like this:
```{r echo=F}
set.seed(237)
hist(rnorm(1000, mean = 8, sd = 2), main='', xlab='Frequency', ylab='Count')
```
However, the main variable for this study is the frequency of sign variants, with a strong skew and many zero values:
```{r echo=F}
variants = read.csv('../data/processedData/variants_summary.csv', stringsAsFactors = F)
hist(variants$freq_week_4, main='', xlab='Frequency', ylab='Count', breaks=0:max(variants$freq_week_4))
```
Instead of using a normal distribution as the basis for the statistical model or transforming the data (which is difficult anyway because of the large number of zero counts), we can use a poisson distribution.  This also has the advantage of only predicting whole, non-negative numbers, which makes sense for this data because a variant can't be used half a time or a negative number of times.
# Load libraries
```{r warning=F, message=F}
library(ggplot2)
library(lme4)
library(Rmisc)
library(dplyr)
library(sjPlot)
library(gridExtra)
library(REEMtree)
```
```{r echo=F}
setwd("~/Documents/MPI/KangSukColours/ColourExperiment/analysis/")
getMEText = function(r,ef, wald=NULL, showWald=F){
AIC = r[2,]$AIC
loglikDiff = signif(diff(r$logLik),2)
chi = round(r$Chisq[2],2)
df = r$`Chi Df`[2]
p = signif(r$`Pr(>Chisq)`[2],2)
wald.text = ""
if(!is.null(wald)){
est = signif(wald[1],2)
stder = signif(wald[2],2)
t = signif(wald[3],2)
wptext = ""
wald.text =  paste("beta = ",est,",")
if(showWald){
if(!is.na(wald[4])){
wptext = paste(", Wald p =",signif(wald[4],2))
}
wald.text = paste("beta = ",est,", std.err = ",stder, ", Wald t = ",t,wptext,';')
}
}
begin = 'There was no significant'
if(p <0.09){
begin = "There was a marginal"
}
if(p < 0.05){
begin = 'There was a significant'
}
return(paste(begin,ef,"(",wald.text,"log likelihood difference =",
loglikDiff,", df = ",df,", Chi Squared =", chi,", p = ",p,")."))
}
```
# Load data
```{r}
variants = read.csv('../data/processedData/variants_summary.csv', stringsAsFactors = F)
```
There is only 1 variant for `white'.  Therefore, we remove it from this statistical analysis.
```{r}
variants = variants[variants$colourName!='white',]
```
Some variants need to be removed:
```{r}
variants = variants[!variants$sign %in%
c("SAME",
"DIFFERENT",
"DO NOT UNDERSTAND",
"UNDERSTAND",
"ME",
"YOU",
"YES",
"NOT",
"SIGNING"),]
```
Transform some variables.
```{r}
# The range of values for 'Teach' is very small:
table(variants$Teach)
# So we'll turn it into a binary category:
#  variants that were never taught and variants that were
variants$Teach = as.factor(variants$Teach >0)
# Similar for checking
variants$check.any = as.factor(variants$check>0)
variants$candidateUnderstanding.any = as.factor(variants$candidateUnderstanding>0)
variants$T0 = c("No","Check")[as.numeric(variants$check.any=="TRUE")+1]
variants$T0[variants$candidateUnderstanding.any=="TRUE"] = "Candidate Understanding"
# Collapse checks and candidate understandings
variants$T0[variants$T0 %in% c("Check","Candidate Understanding")] = "Yes"
variants$T0 = factor(variants$T0, levels = c("No","Yes"))
# ... and T-1
variants$T_minus_1.any = as.factor(variants$T_minus_1>0)
# Transform total frequency
variants$freq_week_1_total.logcenter =
log(variants$freq_week_1_total + 1)
variants$freq_week_1_total.logcenter = scale(variants$freq_week_1_total.logcenter)
# cut TryMarking into two categories
variants$TryMarked.any = as.factor(variants$TryMarked>0)
# transform length
# One extreme value is scaled down to the next highest number
variants$averageLength_week_1[
variants$averageLength_week_1>30000] =
max(variants$averageLength_week_1[
variants$averageLength_week_1<20000])
variants$averageLength_week_1.logcenter = log(variants$averageLength_week_1)
variants$averageLength_week_1.logcenter =
scale(variants$averageLength_week_1.logcenter)
variants$indexical = as.factor(variants$indexical)
# Make inventedBy deviation coding
#  (deviation from the grand mean)
variants$inventedBy = as.factor(variants$inventedBy)
#contrasts(variants$inventedBy) = contr.sum(length(levels(variants$inventedBy)))
listofsigns = variants[,c("colourName","sign")]
write.csv(listofsigns,"../results/descriptive/ListOfVariants.csv", fileEncoding = 'utf-8')
```
# LMER models
Each model predicts the frequency of a variant in week 4, with a random intercept by colourName.  The random intercept allows some colours to have higher variant frequencies than others.  This is useful because we know that signs for some colours are converged on quickly, making their frequencies within those colours potentially higher.  In other words, the use of a particular variant to refer to a given colour is not entierly independent of the use of another variant to refer to the same colour.
Random slopes allow the strength of the effect of a factor to be different for each colour concept.  Only indexicality is theoretically relevant here: it is possible that an indexical strategy, particularly body-indexical signs, would be more effective for some colours than others.  For example, the body affords indexicality for black (hair) and red (tongue), but not green.  We can check whether this is true by comparing a baseline model to one with a random slope for indexicality.
```{r ranEfTest, cache=T}
# Optimiser adjustments
gcontrol = control=glmerControl(
optimizer = 'bobyqa',
optCtrl = list(maxfun = 1000000))
m0 = glmer(freq_week_4 ~
1
+ (1 | colourName) ,
data=variants, family=poisson,
control=gcontrol)
m1 = glmer(freq_week_4 ~
1
+ (1 + indexical || colourName) ,
data=variants, family=poisson,
control=gcontrol)
anova(m0,m1)
mTryXF = glmer(freq_week_4 ~
1 +
freq_week_1_total.logcenter +
averageLength_week_1.logcenter +
indexical +
Teach +
TryMarked.any +
T0 +
T_minus_1.any +
inventedBy +
T0:freq_week_1_total.logcenter +
Teach:freq_week_1_total.logcenter +
TryMarked.any:freq_week_1_total.logcenter +
(1 + indexical || colourName) ,
data=variants, family=poisson,
control=gcontrol)
finalModel = mTryXF
xi = sjp.int(finalModel, swap.pred = T, facet.grid = F,
prnt.plot = F)
xi
xi[[2]]
xi$plot.list[[2]]
g = xi$plot.list[[2]]
g + ylim(c(0,10))
g + coord_cartesian(ylim=c(0,10))
g + coord_cartesian(ylim=c(0,1))
xi = sjp.int(finalModel, swap.pred = T, facet.grid = F,
prnt.plot = F)
for(i in 1:3){
freq.mx = xi$plot.list[[i]]$data$x
xi$plot.list[[i]]$data$x =
exp(freq.mx*
attr(variants$freq_week_1_total.logcenter, 'scaled:scale') +
attr(variants$freq_week_1_total.logcenter, 'scaled:center') -1)
}
ggplot(xi$plot.list[[1]]$data, aes(x,y,colour=grp)) +
geom_line()  +
xlab("Frequency") +
ylab("Predicted incidents for final week frequency") +
theme(legend.position="top") +
scale_color_discrete(name="T0")
xi$plot.list[[2]]$data$grp = c("No","Yes")[as.numeric(xi$plot.list[[2]]$data$grp)]
ggplot(xi$plot.list[[2]]$data, aes(x,y,colour=grp)) +
geom_line()  +
xlab("Frequency") +
ylab("Predicted incidents for final week frequency") +
theme(legend.position="top") +
scale_color_discrete(name="Teach")
ggplot(xi$plot.list[[2]]$data, aes(x,y,colour=grp)) +
geom_line()  +
xlab("Frequency") +
ylab("Predicted incidents for final week frequency") +
theme(legend.position="top") +
scale_color_discrete(name="Teach") +
coord_cartesian(ylim=c(0,1))
xi$plot.list[[3]]$data$grp = c("No","Yes")[as.numeric(xi$plot.list[[3]]$data$grp)]
ggplot(xi$plot.list[[2]]$data, aes(x,y,colour=grp)) +
geom_line()  +
xlab("Frequency") +
ylab("Predicted incidents for final week frequency") +
theme(legend.position="top") +
scale_color_discrete(name="Try Marked")
ggplot(xi$plot.list[[2]]$data, aes(x,y,colour=grp)) +
geom_line()  +
xlab("Frequency") +
ylab("Predicted incidents for final week frequency") +
theme(legend.position="top") +
scale_color_discrete(name="Try Marked") +
coord_cartesian(ylim=c(0,1))
ggplot(xi$plot.list[[3]]$data, aes(x,y,colour=grp)) +
geom_line()  +
xlab("Frequency") +
ylab("Predicted incidents for final week frequency") +
theme(legend.position="top") +
scale_color_discrete(name="Try Marked") +
coord_cartesian(ylim=c(0,1))
ggplot(xi$plot.list[[3]]$data, aes(x,y,colour=grp)) +
geom_line()  +
xlab("Frequency") +
ylab("Predicted incidents for final week frequency") +
theme(legend.position="top") +
scale_color_discrete(name="Try Marked") +
coord_cartesian(ylim=c(0,0.1))
library(ggplot2)
library(lme4)
setwd("~/Documents/MPI/KangSukColours/ColourExperiment/analysis/")
d = read.csv("../data/processedData/variants_processed.csv", stringsAsFactors = F)
d$trial_value = as.character(d$trial_value)  # legacy compatibility
colourNumbers = c("1","5",'6',"7","14",'18','24')
colourNames = c("red",'brown','white','black','green','yellow','pink')
names(colourNames) = colourNumbers
colourNamesDark = c("red", 'orange','gray', 'black', 'dark green','gold', 'pink')
d = d[d$trial_value %in% colourNumbers,]
d$trialColourName = colourNames[as.character(d$trial_value)]
d$trialColourName = factor(d$trialColourName, levels = colourNames)
###########
sun = table(d[d$sign_value=="SUN",]$week)
yellow = table(d[d$sign_value=="GREEN1-1",]$week)
barplot(rbind(sun,yellow), beside=T, xlab='week', ylab='frequency', ylim=c(0,20),col=1:2)
legend(1,20,legend=c("SUN","GREEN1-1"), col=1:2, pch=15)
# pdf("../results/descriptive/graphs/IconicityByWeek.pdf")
# barplot(table(d$iconic,d$week), col=1:2, xlab='Week')
# legend(1.5,150,legend=c("Iconic","Not iconic"), col=2:1, pch=15)
# dev.off()
# w1 = table(d[d$week==1,]$iconic, d[d$week==1,]$trialColourName)
# w4 = table(d[d$week==4,]$iconic, d[d$week==4,]$trialColourName)
#
#
# pdf("../results/descriptive/graphs/IconicityByWeekByColour.pdf")
# barplot(cbind(w1,c(NA,NA),w4), col=1:2, las=2)
# abline(v=7.9)
# axis(1,line=2.5,at=c(4,12), labels=c("Week 1","Week 3"), tick=F, lwd=0)
# legend(1.5,150,legend=c("Iconic","Not iconic"), col=2:1, pch=15)
# dev.off()
library(gplots)
pdf("../results/descriptive/graphs/LengthByWeek_YELLOW.pdf")
plotmeans(d[d$sign_value=="YELLOW",]$sign_length~d[d$sign_value=="YELLOW",]$week, xlab='Week', ylab="Length (ms)", main='Length of the sign YELLOW')
dev.off()
pdf("../results/descriptive/graphs/LengthByWeek.pdf")
plotmeans(d$sign_length~d$week, xlab='', ylab="Length (ms)", main='Length of signs', legends = c("Week 1","Week 3"))
dev.off()
# pdf("../results/descriptive/graphs/IconicByWeekByPart.pdf", width=8, height=5)
# partIconic = table(d$iconic,d$speakerName,d$week)
# cbind(partIconic[,,1],partIconic[,,2])
# barplot(cbind(partIconic[,,1],partIconic[,,2]), col=1:2)
# abline(v=4.9)
# text(c(2.5,7.5),c(65,65), c("Week 1", "week 3"))
# legend(5,50, c("Iconic","Non-iconic"), col=2:1, pch=15)
# dev.off()
inventedBy = tapply(d$sign_value,d$inventedBy, function(X){length(unique(X))})
myData <- aggregate(d[d$director==d$speaker,]$sign_length,
by = list(colour = d[d$director==d$speaker,]$trialColourName, d[d$director==d$speaker,]$week),
FUN = function(x) c(mean = mean(x), sd = sd(x),
n = length(x)))
myData <- do.call(data.frame, myData)
myData$se <- myData$x.sd / sqrt(myData$x.n)
colnames(myData) = c('Colour','Week','mean','sd','n','se')
dodge <- position_dodge(width = 0.9)
limits <- aes(ymax = myData$mean + myData$se, ymin = myData$mean - myData$se)
p <- ggplot(data = myData, aes(x = Colour, y = mean, group = Week))
p
p + geom_bar(stat = "identity", position = 'dodge', fill=rep(colourNames,each=2)) +
geom_errorbar(limits, position = dodge, width = 0.25) +
theme(axis.text.x=element_text(), axis.ticks.x=element_blank(),
axis.title.x=element_blank(), plot.title=element_text("Sign Length")) + ylab("Sign length (ms)") +
scale_colour_manual(values=colourNames)
pdf("../results/descriptive/graphs/LengthOfSignsByColourAndWeek_gg.pdf",width=3.5, height=3.5)
p + geom_bar(stat = "identity", position = 'dodge', fill=rep(colourNames,each=2),colour="black") +
geom_errorbar(limits, position = dodge, width = 0.25) +
theme(axis.text.x=element_text(), axis.ticks.x=element_blank(),
axis.title.x=element_blank(), plot.title=element_text("Sign Length")) + ylab("Sign length (ms)") +
scale_colour_manual(values=colourNames)
dev.off()
p + geom_bar(stat = "identity", position = position_dodge(width=0.8), fill=rep(colourNames,each=2),colour="black") +
geom_errorbar(limits, position = position_dodge(width=0.8), width = 0.25) +
theme(axis.text.x=element_text(), axis.ticks.x=element_blank(),
axis.title.x=element_blank(), plot.title=element_text("Sign Length")) + ylab("Sign length (ms)") +
scale_colour_manual(values=colourNames)
p + geom_bar(stat = "identity", position = position_dodge(width=0.8), fill=rep(colourNames,each=2),colour="black") +
geom_errorbar(limits, position = position_dodge(width=0.3), width = 0.25) +
theme(axis.text.x=element_text(), axis.ticks.x=element_blank(),
axis.title.x=element_blank(), plot.title=element_text("Sign Length")) + ylab("Sign length (ms)") +
scale_colour_manual(values=colourNames)
p + geom_bar(stat = "identity", position = position_dodge(width=0.3), fill=rep(colourNames,each=2),colour="black") +
geom_errorbar(limits, position = position_dodge(width=0.3), width = 0.25) +
theme(axis.text.x=element_text(), axis.ticks.x=element_blank(),
axis.title.x=element_blank(), plot.title=element_text("Sign Length")) + ylab("Sign length (ms)") +
scale_colour_manual(values=colourNames)
p + geom_bar(stat = "identity", position = position_dodge(width=1.1), fill=rep(colourNames,each=2),colour="black") +
geom_errorbar(limits, position = position_dodge(width=0.3), width = 0.25) +
theme(axis.text.x=element_text(), axis.ticks.x=element_blank(),
axis.title.x=element_blank(), plot.title=element_text("Sign Length")) + ylab("Sign length (ms)") +
scale_colour_manual(values=colourNames)
p + geom_bar(stat = "identity", position = position_dodge(width=1.0), fill=rep(colourNames,each=2),colour="black") +
geom_errorbar(limits, position = position_dodge(width=0.3), width = 0.25) +
theme(axis.text.x=element_text(), axis.ticks.x=element_blank(),
axis.title.x=element_blank(), plot.title=element_text("Sign Length")) + ylab("Sign length (ms)") +
scale_colour_manual(values=colourNames)
pdf("../results/descriptive/graphs/LengthOfSignsByColourAndWeek_gg.pdf",width=3.5, height=3.5)
p + geom_bar(stat = "identity", position = position_dodge(width=1.0), fill=rep(colourNames,each=2),colour="black") +
geom_errorbar(limits, position = position_dodge(width=1.0), width = 0.25) +
theme(axis.text.x=element_text(), axis.ticks.x=element_blank(),
axis.title.x=element_blank(), plot.title=element_text("Sign Length")) + ylab("Sign length (ms)") +
scale_colour_manual(values=colourNames)
dev.off()
myDataS <- aggregate(d[d$director==d$speaker,]$trial_length,
by = list(d[d$director==d$speaker,]$week,d[d$director==d$speaker,]$session),
FUN = function(x) c(mean = mean(x), sd = sd(x),
n = length(x)))
myDataS <- do.call(data.frame, myDataS)
myDataS$se <- myDataS$x.sd / sqrt(myDataS$x.n)
colnames(myDataS) = c('Week','Session','mean','sd','n','se')
myDataS$Week = factor(myDataS$Week,labels =c("Week 1","Week 3"))
myDataS$Session = as.factor(myDataS$Session)
dodge <- position_dodge(width = 0.6)
limits <- aes(ymax = myDataS$mean + myDataS$se, ymin = myDataS$mean - myDataS$se)
p <- ggplot(data = myDataS, aes(x = Week, y = mean,group=Session))
p + geom_bar(stat = "identity", position = dodge, width = 0.5) +
geom_errorbar(limits, position = dodge, width = 0.25) +
theme(axis.text.x=element_text(), axis.ticks.x=element_blank(),
axis.title.x=element_blank(), plot.title=element_text("Sign Length")) + ylab("Trial length (ms)") +
scale_colour_manual(values=colourNames) +
annotate("text", x = 0.8, y = 5000, label = "Round 1",angle = 90,color="white",size=3) +
annotate("text", x = 1, y = 5000, label = "Round 2",angle = 90,color="white",size=3)+
annotate("text", x = 1.2, y = 5000, label = "Round 3",angle = 90,color="white",size=3) +
annotate("text", x = 1.8, y = 10700, label = "Round 1",angle = 90,color="black",size=3) +
annotate("text", x = 2, y = 10700, label = "Round 2",angle = 90,color="black",size=3)+
annotate("text", x = 2.2, y = 10700, label = "Round 3",angle = 90,color="black",size=3)
week1L.trial.label = week1L.trial
week1L.trial.label['black'] = 7000
week1L.trial.label['green'] = 4000
myData <- aggregate(d[d$director==d$speaker,]$trial_length,
by = list(colour = d[d$director==d$speaker,]$trialColourName, d[d$director==d$speaker,]$week),
FUN = function(x) c(mean = mean(x), sd = sd(x),
n = length(x)))
myData <- do.call(data.frame, myData)
myData$se <- myData$x.sd / sqrt(myData$x.n)
colnames(myData) = c('Colour','Week','mean','sd','n','se')
dodge <- position_dodge(width = 0.9)
limits <- aes(ymax = myData$mean + myData$se, ymin = myData$mean - myData$se)
p <- ggplot(data = myData, aes(x = Colour, y = mean, group = Week))
p + geom_bar(stat = "identity", position = 'dodge', fill=rep(colourNames,each=2)) +
geom_errorbar(limits, position = dodge, width = 0.25) +
theme(axis.text.x=element_text(), axis.ticks.x=element_blank(),
axis.title.x=element_blank(), plot.title=element_text("Trial Length")) + ylab("Trial length (ms)") +
scale_colour_manual(values=colourNames)
dodge <- position_dodge(width = 1.0)
p + geom_bar(stat = "identity", position = dodge, fill=rep(colourNames,each=2), colour="black") +
geom_errorbar(limits, position = dodge, width = 0.25) +
theme(axis.text.x=element_text(), axis.ticks.x=element_blank(),
axis.title.x=element_blank(), plot.title=element_text("Trial Length")) + ylab("Trial length (ms)") +
scale_colour_manual(values=colourNames)
pdf("../results/descriptive/graphs/LengthOfTrialsByColourAndWeek_gg.pdf",width=3.5, height=3.5)
p + geom_bar(stat = "identity", position = dodge, fill=rep(colourNames,each=2), colour="black") +
geom_errorbar(limits, position = dodge, width = 0.25) +
theme(axis.text.x=element_text(), axis.ticks.x=element_blank(),
axis.title.x=element_blank(), plot.title=element_text("Trial Length")) + ylab("Trial length (ms)") +
scale_colour_manual(values=colourNames)
dev.off()
colourNames
colourNames2 = colourNames
colourNames2[4] = "dark gray"
p + geom_bar(stat = "identity", position = dodge, fill=rep(colourNames2,each=2), colour="black") +
geom_errorbar(limits, position = dodge, width = 0.25) +
theme(axis.text.x=element_text(), axis.ticks.x=element_blank(),
axis.title.x=element_blank(), plot.title=element_text("Trial Length")) + ylab("Trial length (ms)") +
scale_colour_manual(values=colourNames)
colourNames2[4] = "#444444"
p + geom_bar(stat = "identity", position = dodge, fill=rep(colourNames,each=2), colour="black") +
geom_errorbar(limits, position = dodge, width = 0.25) +
theme(axis.text.x=element_text(), axis.ticks.x=element_blank(),
axis.title.x=element_blank(), plot.title=element_text("Trial Length")) + ylab("Trial length (ms)") +
scale_colour_manual(values=colourNames)
p + geom_bar(stat = "identity", position = dodge, fill=rep(colourNames2,each=2), colour="black") +
geom_errorbar(limits, position = dodge, width = 0.25) +
theme(axis.text.x=element_text(), axis.ticks.x=element_blank(),
axis.title.x=element_blank(), plot.title=element_text("Trial Length")) + ylab("Trial length (ms)") +
scale_colour_manual(values=colourNames)
colourNames2 = colourNames
colourNames2[4] = "#444444"
pdf("../results/descriptive/graphs/LengthOfTrialsByColourAndWeek_gg.pdf",width=3.5, height=3.5)
p + geom_bar(stat = "identity", position = dodge, fill=rep(colourNames2,each=2), colour="black") +
geom_errorbar(limits, position = dodge, width = 0.25) +
theme(axis.text.x=element_text(), axis.ticks.x=element_blank(),
axis.title.x=element_blank(), plot.title=element_text("Trial Length")) + ylab("Trial length (ms)") +
scale_colour_manual(values=colourNames)
dev.off()
colourNames2[4] = "#444444"
myData <- aggregate(d[d$director==d$speaker,]$sign_length,
by = list(colour = d[d$director==d$speaker,]$trialColourName, d[d$director==d$speaker,]$week),
FUN = function(x) c(mean = mean(x), sd = sd(x),
n = length(x)))
myData <- do.call(data.frame, myData)
myData$se <- myData$x.sd / sqrt(myData$x.n)
colnames(myData) = c('Colour','Week','mean','sd','n','se')
dodge <- position_dodge(width = 0.9)
limits <- aes(ymax = myData$mean + myData$se, ymin = myData$mean - myData$se)
colourNames2 = colourNames
colourNames2[4] = "#444444"
p <- ggplot(data = myData, aes(x = Colour, y = mean, group = Week))
pdf("../results/descriptive/graphs/LengthOfSignsByColourAndWeek_gg.pdf",width=3.5, height=3.5)
p + geom_bar(stat = "identity", position = position_dodge(width=1.0), fill=rep(colourNames2,each=2),colour="black") +
geom_errorbar(limits, position = position_dodge(width=1.0), width = 0.25) +
theme(axis.text.x=element_text(), axis.ticks.x=element_blank(),
axis.title.x=element_blank(), plot.title=element_text("Sign Length")) + ylab("Sign length (ms)") +
scale_colour_manual(values=colourNames)
dev.off()
dodge <- position_dodge(width = 0.9)
p <- ggplot(data = myData, aes(x = Colour, y = mean, group = Week))
p + geom_bar(stat = "identity", position = dodge, fill=rep(colourNames2,each=2),colour="black") +
geom_errorbar(limits, position = dodge, width = 0.25) +
theme(axis.text.x=element_text(), axis.ticks.x=element_blank(),
axis.title.x=element_blank(), plot.title=element_text("Sign Length")) + ylab("Sign length (ms)") +
scale_colour_manual(values=colourNames)
pdf("../results/descriptive/graphs/LengthOfSignsByColourAndWeek_gg.pdf",width=3.5, height=3.5)
p + geom_bar(stat = "identity", position = dodge, fill=rep(colourNames2,each=2),colour="black") +
geom_errorbar(limits, position = dodge, width = 0.25) +
theme(axis.text.x=element_text(), axis.ticks.x=element_blank(),
axis.title.x=element_blank(), plot.title=element_text("Sign Length")) + ylab("Sign length (ms)") +
scale_colour_manual(values=colourNames)
dev.off()
myData <- aggregate(d[d$director==d$speaker,]$trial_length,
by = list(colour = d[d$director==d$speaker,]$trialColourName, d[d$director==d$speaker,]$week),
FUN = function(x) c(mean = mean(x), sd = sd(x),
n = length(x)))
myData <- do.call(data.frame, myData)
myData$se <- myData$x.sd / sqrt(myData$x.n)
colnames(myData) = c('Colour','Week','mean','sd','n','se')
dodge <- position_dodge(width = 1.0)
limits <- aes(ymax = myData$mean + myData$se, ymin = myData$mean - myData$se)
colourNames2 = colourNames
colourNames2[4] = "#444444"
p <- ggplot(data = myData, aes(x = Colour, y = mean, group = Week))
dodge <- position_dodge(width = 0.9)
p + geom_bar(stat = "identity", position = dodge, fill=rep(colourNames2,each=2), colour="black") +
geom_errorbar(limits, position = dodge, width = 0.25) +
theme(axis.text.x=element_text(), axis.ticks.x=element_blank(),
axis.title.x=element_blank(), plot.title=element_text("Trial Length")) + ylab("Trial length (ms)") +
scale_colour_manual(values=colourNames)
pdf("../results/descriptive/graphs/LengthOfTrialsByColourAndWeek_gg.pdf",width=3.5, height=3.5)
p + geom_bar(stat = "identity", position = dodge, fill=rep(colourNames2,each=2), colour="black") +
geom_errorbar(limits, position = dodge, width = 0.25) +
theme(axis.text.x=element_text(), axis.ticks.x=element_blank(),
axis.title.x=element_blank(), plot.title=element_text("Trial Length")) + ylab("Trial length (ms)") +
scale_colour_manual(values=colourNames)
dev.off()
