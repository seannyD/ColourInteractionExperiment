dev.off()
# number of variants adopted
adopted = sapply(sort(unique(d$speakerName)), function(X){
x = d[d$speakerName==X,]$inventedBy
x2 = tapply(d[d$speakerName==X,]$sign_value, d[d$speakerName==X,]$inventedBy, function(z){length(unique(z))})
sum(x2[names(x2)!=X])
})
pdf("../results/descriptive/graphs/AdoptedVsInvented.pdf")
plot(inventedBy,adopted, ylim=c(0,35), xlim=c(0,35), xlab="Number of variants invented", ylab="Number of variants adopted")
abline(0,1, col='gray')
text(inventedBy,adopted,names(inventedBy), pos=3)
dev.off()
pdf("../results/descriptive/graphs/NumVariants.pdf", width=8, height=5)
cols = rainbow(2)
barplot(matrix(tapply(d$sign_value, paste(d$speakerName,d$week), function(X){length(unique(X))}), nrow=2), beside = T, names.arg = sort(unique(d$speakerName)), col=cols, main='Number of variants used')
legend(9,80,c("Week 1","week 3"), col=cols, pch=15)
dev.off()
week1L = tapply(d[d$director==d$speaker & d$week==1,]$sign_length, d[d$director==d$speaker & d$week==1,]$trialColourName, mean,na.rm=T)
week4L = tapply(d[d$director==d$speaker & d$week==4,]$sign_length, d[d$director==d$speaker & d$week==4,]$trialColourName, mean,na.rm=T)
pdf("../results/descriptive/graphs/LengthOfSignsByColour.pdf")
plot(c(0.5,2.5),range(c(week1L,week4L),na.rm=T), type='n', ylab='Sign length (ms)', xlab='Week', xaxt="n")
axis(1,at=1:2, c("Week 1", "week 3"))
points(rep(1,length(week1L)), week1L, col=colourNamesDark, pch=16)
points(rep(2,length(week4L)), week4L, col=colourNamesDark, pch=16)
for(i in 1:length(week1L)){
lines(c(1,2),c(week1L[i],week4L[i]), col=colourNamesDark[i])
}
dev.off()
for(i in 1:length(colourNames)){
plotmeans(sign_length~week, data = d[d$director==d$speaker & d$trialColourName==colourNames[i], ], add=i!=1, col=colourNamesDark[i])
}
week1L.trial = tapply(d[d$director==d$speaker & d$week==1,]$trial_length, d[d$director==d$speaker & d$week==1,]$trialColourName, mean)
week4L.trial = tapply(d[d$director==d$speaker & d$week==4,]$trial_length, d[d$director==d$speaker & d$week==4,]$trialColourName, mean)
barplot(rbind(week1L.trial, week4L.trial),beside = T, col=rep(colourNames,each=2), ylab='Trial length')
myData <- aggregate(d[d$director==d$speaker,]$trial_length,
by = list(colour = d[d$director==d$speaker,]$trialColourName, d[d$director==d$speaker,]$week),
FUN = function(x) c(mean = mean(x), sd = sd(x),
n = length(x)))
myData <- do.call(data.frame, myData)
myData$se <- myData$x.sd / sqrt(myData$x.n)
colnames(myData) = c('Colour','Week','mean','sd','n','se')
dodge <- position_dodge(width = 0.9)
limits <- aes(ymax = myData$mean + myData$se, ymin = myData$mean - myData$se)
p <- ggplot(data = myData, aes(x = Colour, y = mean, group = Week))
pdf("../results/descriptive/graphs/LengthOfTrialsByColourAndWeek_gg.pdf")
p + geom_bar(stat = "identity", position = 'dodge', fill=rep(colourNames,each=2)) +
geom_errorbar(limits, position = dodge, width = 0.25) +
theme(axis.text.x=element_text(), axis.ticks.x=element_blank(),
axis.title.x=element_blank(), plot.title=element_text("Trial Length")) + ylab("Trial length (ms)") +
scale_colour_manual(values=colourNames)
dev.off()
######
myData <- aggregate(d[d$director==d$speaker,]$sign_length,
by = list(colour = d[d$director==d$speaker,]$trialColourName, d[d$director==d$speaker,]$week),
FUN = function(x) c(mean = mean(x), sd = sd(x),
n = length(x)))
myData <- do.call(data.frame, myData)
myData$se <- myData$x.sd / sqrt(myData$x.n)
colnames(myData) = c('Colour','Week','mean','sd','n','se')
dodge <- position_dodge(width = 0.9)
limits <- aes(ymax = myData$mean + myData$se, ymin = myData$mean - myData$se)
p <- ggplot(data = myData, aes(x = Colour, y = mean, group = Week))
pdf("../results/descriptive/graphs/LengthOfSignsByColourAndWeek_gg.pdf")
p + geom_bar(stat = "identity", position = 'dodge', fill=rep(colourNames,each=2)) +
geom_errorbar(limits, position = dodge, width = 0.25) +
theme(axis.text.x=element_text(), axis.ticks.x=element_blank(),
axis.title.x=element_blank(), plot.title=element_text("Sign Length")) + ylab("Sign length (ms)") +
scale_colour_manual(values=colourNames)
dev.off()
####
pdf("../results/descriptive/graphs/LengthOfTrialsByColour.pdf")
plot(c(0.5,2.5),range(c(week1L.trial,week4L.trial)), type='n', ylab='Trial length (ms)', xlab='Week', xaxt="n")
axis(1,at=1:2, c("Week 1", "week 3"))
points(rep(1,length(week1L.trial)), week1L.trial, col=colourNamesDark, pch=16)
points(rep(2,length(week4L.trial)), week4L.trial, col=colourNamesDark, pch=16)
for(i in 1:length(week1L)){
lines(c(1,2),c(week1L.trial[i],week4L.trial[i]), col=colourNamesDark[i])
}
dev.off()
plotmeans(sign_length~trialColourName,  d[d$director==d$speaker & d$week==1,], connect = F, col = colourNames, pch=16, barcol = 1,xlab='Colour', ylab='Sign length (ms)')
plotmeans(sign_length~trialColourName,  d[d$director==d$speaker & d$week==4,], connect = F, col = colourNames, pch=16, barcol = 1,xlab='Colour', ylab='Sign length (ms)', add=T)
###########
variants = read.csv('../data/processedData/variants_summary.csv', stringsAsFactors = F)
d$BodyAnchor = variants[match(d$sign_value, variants$sign),]$BodyAnchor
w1 = table(d[d$week==1,]$Indexicality,d[d$week==1,]$trialColourName)
w1 = w1[,c("red",'black','white','brown','green','yellow','pink')]
w3 = table(d[d$week==4,]$Indexicality,d[d$week==4,]$trialColourName)
w3 = w3[,c("red",'black','white','brown','green','yellow','pink')]
xtab = cbind(w1,c(NA,NA,NA), w3)
pdf("../results/descriptive/graphs/BodyAnchoredByColourByWeek.pdf", width=6, height = 5)
barplot(xtab, col=3:5, las=2)
legend(12,30,c('No','Yes',"Yes, Body Anchored"), col=3:5, pch=15)
axis(1,line=2.5,at=c(4,12), labels=c("Week 1","Week 3"), tick=F, lwd=0)
dev.off()
pdf("../results/descriptive/graphs/FreqWeek1_vs_FreqWeek2.pdf", width=5, height=5)
plot(variants$freq_week_1, jitter(variants$freq_week_4), pch=16, col=rgb(0,0,0,0.2), ylab='Frequency in week 3', xlab='Frequency in week 1')
dev.off()
pdf("../results/descriptive/graphs/FreqWeek1_vs_FreqWeek2.pdf", width=5, height=5)
plot(variants$freq_week_1, jitter(variants$freq_week_4), pch=16, col=variants$colourName, ylab='Frequency in week 3', xlab='Frequency in week 1')
dev.off()
week1 = tapply(d[d$trial_value %in% colourNumbers & d$week==1,]$sign_value, d[d$trial_value %in% colourNumbers & d$week==1,]$trial_value, function(X){length(unique(X,na.rm=T))})
week4 = tapply(d[d$trial_value %in% colourNumbers & d$week==4,]$sign_value, d[d$trial_value %in% colourNumbers & d$week==4,]$trial_value, function(X){length(unique(X,na.rm=T))})
xtab = cbind(week1,week4)
pdf("../results/descriptive/graphs/NumberOfVariantsByColourByWeek.pdf", width=8, height=5)
barplot(xtab,beside=T, col=colourNames[rownames(xtab)], main='Number of Variants')
dev.off()
xtab2 = week1
xtab2 = sort(xtab2)
propBodyAnchor = tapply(d$Indexicality,d$trial_value,function(X){sum(X %in% c("Yes-body","Yes"),na.rm=T)/length(X)})
propBodyAnchor = propBodyAnchor[as.character(rownames(xtab2))]
pdf("../results/descriptive/graphs/NumberOfVariantsByColourByWeek_sorted.pdf", width=8, height=5)
barplot(xtab2,beside=T, col=colourNames[rownames(xtab2)], main='', names.arg = colourNames[rownames(xtab2)], ylim=c(0,45), ylab='Number of variants in week 1')
#text(seq(0.75,8,length.out=7),xtab2+2,
#     paste(round(propBodyAnchor*100),"%",sep=''))
dev.off()
pdf("../results/descriptive/graphs/NumberOfVariantsBy_by_Indexicality.pdf", width=4, height=5)
plot(xtab2, propBodyAnchor, pch=16, col=colourNames[rownames(xtab2)], xlab='Number of variants in week 1', ylab='Proportion of indexical variants', cex=2)
points(xtab2[1], propBodyAnchor[1], pch=1, col=1, cex=2)
points(xtab2[7], propBodyAnchor[7], pch=1, col=1, cex=2)
dev.off()
####
# Try marking
variants$check.any = variants$check >0
plotmeans(freq_week_4 ~
paste(TryMarked>0,Teach>0),
data = variants[!(!(variants$TryMarked>0) & (variants$Teach>0)),],
legends = c("No Try Mark","Try Marking","Try Marking & Teaching"),
xlab="", ylab='Fitness of variants')
plotmeans(variants$freq_week_4~
paste(variants$colourName,variants$TryMarked>0),
col = rep(colourNamesDark,each=2), pch=c(16,15))
plotmeans(variants$freq_week_4 ~
paste(variants$colourName,variants$check.any),
col = rep(colourNamesDark,each=2), pch=c(16,15))
### sign origin
plotmeans(freq_week_4~ origin, data=variants[variants$origin %in% c("ISL","JSL","NSL"),])
#######
library(party)
variants$iconic = as.factor(variants$iconic)
variants$inventedBy = as.factor(variants$inventedBy)
variants$indexical = as.factor(variants$indexical)
variants$TeachT = as.factor(variants$Teach>0)
variants$TryMarkedT = as.factor(variants$TryMarked>0)
f = ctree(freq_week_4 ~
#     freq_week_1 +
#    indexical +
#   TeachT +
TryMarked,
#  check +
# inventedBy +
#     factor(colourName),
data=variants, control=ctree_control(mincriterion = 0.1))
plot(f, terminal_panel=node_barplot)
d3 = d
d3$freq_week_4[is.na(d3$freq_week_4)] = 0
d3$freq_week4[is.na(d3$freq_week4)] = 0
d3 = d3[d3$freq_week4>0,]
for(i in c('Indexicality','speakerName')){
d3[,i] = as.factor(d3[,i])
}
f2 = ctree(freq_week4 ~
Indexicality +
T0Check +
speakerName +
Teach +
TryMarked,
data=d3,
control=ctree_control(mincriterion = 0.75))
plot(f2, inner_panel=node_inner(f2,id=F),terminal_panel=node_barplot)
pdf("../results/descriptive/graphs/LengthOfTrialsByColourAndWeek_gg.pdf", width=6, height=4)
p + geom_bar(stat = "identity", position = 'dodge', fill=rep(colourNames,each=2)) +
geom_errorbar(limits, position = dodge, width = 0.25) +
theme(axis.text.x=element_text(), axis.ticks.x=element_blank(),
axis.title.x=element_blank(), plot.title=element_text("Trial Length")) + ylab("Trial length (ms)") +
scale_colour_manual(values=colourNames)
dev.off()
library(ggplot2)
setwd("~/Documents/MPI/KangSukColours/ColourExperiment/analysis/")
useOnlyDirector = F
d = read.csv("../data/processedData/variants_processed.csv", stringsAsFactors = F)
d = d[d$sign_value!='SAME',]
d = d[d$sign_value!='',]
d = d[d$sign_value!='?',]
d[d$sign_value=="FOLWER",]$sign_value = "FLOWER"
d[d$sign_value=="BIGHT",]$sign_value = "BRIGHT"
d[d$sign_value=="SIGINING",]$sign_value = "SIGNING"
colourNumbers = c("1","5",'6',"7","14",'18','24')
colourNames = c("red",'brown','white','black','green','yellow','pink')
names(colourNames) = colourNumbers
colourNamesDark = c("dark red", 'orange','gray', 'dark gray', 'dark green','gold', 'purple')
d = d[d$trial_value %in% colourNumbers,]
d$trialColourName = colourNames[d$trial_value]
d$trialColourName = factor(d$trialColourName, levels = colourNames)
individuals = unique(c(d$part1,d$part2))
individuals = c("India",'Jordan','Indonesia',"Nepal")
getLetters = function(pairs){
letterCount = 1
let = matrix(nrow=6,ncol=4)
colnames(let) = individuals
currentLetter = "A"
for(i in 1:nrow(pairs)){
let[letterCount,pairs[i,]$part1] = currentLetter
let[letterCount,pairs[i,]$part2] = currentLetter
if(currentLetter=="A"){
currentLetter = "B"
} else{
currentLetter = "A"
}
if(i %% 2==0){
letterCount = letterCount +1
}
}
return(let)
}
makeTamatizPlot = function(res,pairs,monochrome=T){
variants = unique((res[!is.na(res)]))
colours = rainbow(length(variants))
if(monochrome){
colours = rep('white',length(variants))
}
names(colours) = variants
col = colours[res]
col[is.na(col)] = 'white'
col = matrix(col, ncol=4)
# note that we're plotting upside down!
plot(c(5,1),c(7,1),type='n',xaxt='n',yaxt='n',xlab='',ylab='', bty='n',ylim=c(7,0.9),xlim=c(-0.3,5.2))
for(j in 1:6){
for(i in 1:4){
rect(i,j,i+0.9,j+0.9,col = col[j,i])
text(i+0.5,j+0.8,res[j,i],cex=0.5)
}
}
text((1:4)+0.5,rep(0.8,4),individuals)
text(rep(0.4,6),(1:6)+0.5,paste("Round",rep(1:3,2),sep=''))
text(rep(-0.2,2),c(2,5)+0.5,c("Week 1","Week 3") ,srt=90)
abline(h=3.95)
letters = getLetters(pairs)
for(i in 1:6){
for(j in 1:4){
text(j+0.5,i+0.5,letters[7-i,j])
}
}
}
# d is already in correct time order
for(colourID in colourNumbers){
res = matrix(nrow=6,ncol=4)
colnames(res) = individuals
rowTracker = 1
for(week in unique(d$week)){
pairs = unique(paste(d[d$week==week,]$part1,d[d$week==week,]$part2, d[d$week==week,]$session))
dx = d[d$week==week & d$trial_value==colourID,]
dx$pair = paste(dx$part1,dx$part2,dx$session)
for(session in 1:3){
dxx = dx[dx$session==session,]
if(useOnlyDirector){
dxx = dxx[dxx$director==dxx$speaker,]
}
firstSigns = tapply(dxx$sign_value,dxx$speakerName,head,n=1)
res[rowTracker,] = firstSigns[individuals]
rowTracker = rowTracker + 1
}
}
pairs = d[,c("part1","part2","week","session")]
pairs = pairs[!duplicated(apply(pairs,1,paste,collapse='')),]
filename = paste("../results/descriptive/selectionPlots/SelectionPlot_Mono_", colourNames[colourID],".pdf",sep='')
pdf(filename, width=6,height=6)
makeTamatizPlot(res,pairs)
dev.off()
}
##############
makePropSquare = function(prop,x,y,vcolours){
vcolours = vcolours[prop!=0]
prop = prop[prop!=0]
if(length(prop)>0){
prop = prop[order(vcolours)]
vcolours = sort(vcolours)
#vcolours = vcolours[order(prop)]
prop2 = prop/sum(prop)
prop2 = prop2*0.9
x2 = cumsum(prop2)
x1 = c(0,x2[1:(length(x2)-1)])
x2 = x2 + x
x1 = x1 + x
y1 = y + 0
y2 = y + 0.5
rect(x1,y1,x2,y2,col=vcolours)
}
rect(x-0.05,y-0.5,x+0.95,y+0.5)
}
nv = unique(d[d$director==d$speaker,]$sign_value)
#vcols = rainbow(length(nv))
vcols = rep('white',length(nv))
set.seed(127)
vcols = sample(vcols)
names(vcols)= nv
for(colourID in colourNumbers){
filename = paste("../results/descriptive/selectionPlots/SelectionPlot_Proportions_Mono_", colourNames[colourID],".pdf",sep='')
pdf(filename, width=6,height=6)
plot(c(0,7),c(0,5), ylim=c(6.5,0),xlim=c(-1,5), type='n',xlab='',ylab='', xaxt='n',yaxt='n',bty ='n')
title(colourNames[colourID])
pairs = d[,c("part1","part2","week","session")]
pairs = pairs[!duplicated(apply(pairs,1,paste,collapse='')),]
letters = getLetters(pairs)
for(i in 1:6){
for(j in 1:4){
text(j+0.5,i-0.25,letters[7-i,j])
}
}
text((1:4)+0.5,rep(0,4),individuals)
text(rep(0.3,6),(1:6),paste("Round",rep(1:3,2),sep=''))
text(rep(-0.6,2),c(2,5),c("Week 1","Week 3") ,srt=90)
abline(h=3.5)
rowTracker = 1
for(week in unique(d$week)){
pairs = unique(paste(d[d$week==week,]$part1,d[d$week==week,]$part2, d[d$week==week,]$session))
dx = d[d$week==week & d$trial_value==colourID,]
dx$pair = paste(dx$part1,dx$part2,dx$session)
dx$speakerName = factor(dx$speakerName,levels=individuals)
for(session in 1:3){
dxx = dx[dx$session==session,]
if(useOnlyDirector){
dxx = dxx[dxx$director==dxx$speaker,]
}
tx = as.matrix(table(dxx$sign_value,dxx$speakerName))
tx = tx[,individuals]
for(i in 1:4){
if(is.null(dim(tx))){
partVars = tx[i]
} else{
partVars = tx[,i]
}
vcolsx = vcols[rownames(tx)]
if(is.null(rownames(tx))){
vcolsx = vcols[dxx$sign_value[1]]
}
makePropSquare(partVars,i,rowTracker, vcolsx)
}
rowTracker = rowTracker + 1
}
}
dev.off()
}
library(ggplot2)
setwd("~/Documents/MPI/KangSukColours/ColourExperiment/analysis/")
useOnlyDirector = F
d = read.csv("../data/processedData/variants_processed.csv", stringsAsFactors = F)
d = d[d$sign_value!='SAME',]
d = d[d$sign_value!='',]
d = d[d$sign_value!='?',]
d[d$sign_value=="FOLWER",]$sign_value = "FLOWER"
d[d$sign_value=="BIGHT",]$sign_value = "BRIGHT"
d[d$sign_value=="SIGINING",]$sign_value = "SIGNING"
colourNumbers = c("1","5",'6',"7","14",'18','24')
colourNames = c("red",'brown','white','black','green','yellow','pink')
names(colourNames) = colourNumbers
colourNamesDark = c("dark red", 'orange','gray', 'dark gray', 'dark green','gold', 'purple')
d = d[d$trial_value %in% colourNumbers,]
d$trialColourName = colourNames[d$trial_value]
d$trialColourName = factor(d$trialColourName, levels = colourNames)
individuals = unique(c(d$part1,d$part2))
individuals = c("India",'Jordan','Indonesia',"Nepal")
getLetters = function(pairs){
letterCount = 1
let = matrix(nrow=6,ncol=4)
colnames(let) = individuals
currentLetter = "A"
for(i in 1:nrow(pairs)){
let[letterCount,pairs[i,]$part1] = currentLetter
let[letterCount,pairs[i,]$part2] = currentLetter
if(currentLetter=="A"){
currentLetter = "B"
} else{
currentLetter = "A"
}
if(i %% 2==0){
letterCount = letterCount +1
}
}
return(let)
}
makeTamatizPlot = function(res,pairs){
variants = unique((res[!is.na(res)]))
colours = rainbow(length(variants))
names(colours) = variants
col = colours[res]
col[is.na(col)] = 'white'
col = matrix(col, ncol=4)
# note that we're plotting upside down!
plot(c(5,1),c(7,1),type='n',xaxt='n',yaxt='n',xlab='',ylab='', bty='n',ylim=c(7,0.9),xlim=c(0.5,5.2))
for(j in 1:6){
for(i in 1:4){
rect(i,j,i+0.9,j+0.9,col = col[j,i])
text(i+0.5,j+0.8,res[j,i],cex=0.5)
}
}
text((1:4)+0.5,rep(0.8,4),individuals)
text(rep(0.8,6),(1:6)+0.5,paste("S",rep(1:3,2),sep=''))
#text(rep(0.8,6),(1:6)+0.5,paste("S",rep(1:3,2),sep=''))
text(rep(0.6,2),c(2.5,5.5),c("Week1","Week4") ,srt=90)
abline(h=3.95)
letters = getLetters(pairs)
for(i in 1:6){
for(j in 1:4){
text(j+0.5,i+0.5,letters[7-i,j])
}
}
}
# d is already in correct time order
for(colourID in colourNumbers){
res = matrix(nrow=6,ncol=4)
colnames(res) = individuals
rowTracker = 1
for(week in unique(d$week)){
pairs = unique(paste(d[d$week==week,]$part1,d[d$week==week,]$part2, d[d$week==week,]$session))
dx = d[d$week==week & d$trial_value==colourID,]
dx$pair = paste(dx$part1,dx$part2,dx$session)
for(session in 1:3){
dxx = dx[dx$session==session,]
if(useOnlyDirector){
dxx = dxx[dxx$director==dxx$speaker,]
}
firstSigns = tapply(dxx$sign_value,dxx$speakerName,head,n=1)
res[rowTracker,] = firstSigns[individuals]
rowTracker = rowTracker + 1
}
}
pairs = d[,c("part1","part2","week","session")]
pairs = pairs[!duplicated(apply(pairs,1,paste,collapse='')),]
filename = paste("../results/descriptive/selectionPlots/SelectionPlot_", colourNames[colourID],".pdf",sep='')
pdf(filename, width=6,height=6)
makeTamatizPlot(res,pairs)
dev.off()
}
##############
makePropSquare = function(prop,x,y,vcolours){
vcolours = vcolours[prop!=0]
prop = prop[prop!=0]
if(length(prop)>0){
prop = prop[order(vcolours)]
vcolours = sort(vcolours)
#vcolours = vcolours[order(prop)]
prop2 = prop/sum(prop)
prop2 = prop2*0.9
x2 = cumsum(prop2)
x1 = c(0,x2[1:(length(x2)-1)])
x2 = x2 + x
x1 = x1 + x
y1 = y + 0
y2 = y + 0.5
rect(x1,y1,x2,y2,col=vcolours)
}
rect(x-0.05,y-0.5,x+0.95,y+0.5)
}
nv = unique(d[d$director==d$speaker,]$sign_value)
vcols = rainbow(length(nv))
set.seed(126)
vcols = sample(vcols)
names(vcols)= nv
for(colourID in colourNumbers){
filename = paste("../results/descriptive/selectionPlots/SelectionPlot_Proportions_", colourNames[colourID],".pdf",sep='')
pdf(filename, width=6,height=6)
plot(c(0,7),c(0,5), ylim=c(6.5,0),xlim=c(0,5), type='n',xlab='',ylab='', xaxt='n',yaxt='n',bty ='n')
title(colourNames[colourID])
pairs = d[,c("part1","part2","week","session")]
pairs = pairs[!duplicated(apply(pairs,1,paste,collapse='')),]
letters = getLetters(pairs)
for(i in 1:6){
for(j in 1:4){
text(j+0.5,i-0.25,letters[7-i,j])
}
}
text((1:4)+0.5,rep(0,4),individuals)
text(rep(0.6,6),(1:6),paste("S",rep(1:3,2),sep=''))
text(rep(0.2,2),c(2,5),c("Week1","Week4") ,srt=90)
abline(h=3.5)
rowTracker = 1
for(week in unique(d$week)){
pairs = unique(paste(d[d$week==week,]$part1,d[d$week==week,]$part2, d[d$week==week,]$session))
dx = d[d$week==week & d$trial_value==colourID,]
dx$pair = paste(dx$part1,dx$part2,dx$session)
dx$speakerName = factor(dx$speakerName,levels=individuals)
for(session in 1:3){
dxx = dx[dx$session==session,]
if(useOnlyDirector){
dxx = dxx[dxx$director==dxx$speaker,]
}
tx = as.matrix(table(dxx$sign_value,dxx$speakerName))
tx = tx[,individuals]
for(i in 1:4){
if(is.null(dim(tx))){
partVars = tx[i]
} else{
partVars = tx[,i]
}
vcolsx = vcols[rownames(tx)]
if(is.null(rownames(tx))){
vcolsx = vcols[dxx$sign_value[1]]
}
makePropSquare(partVars,i,rowTracker, vcolsx)
}
rowTracker = rowTracker + 1
}
}
dev.off()
}
tx = table(
exp(predict(finalModel))>=1,
variants$freq_week_4>=1)
colnames(tx) = c("Not observed","Observed")
rownames(tx) = c("Predicted: Not observed",
"Predicted: Observed")
tx
