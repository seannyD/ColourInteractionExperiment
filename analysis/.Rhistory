test('’')
test("XX")
test("YX")
test("~")
test("asdf")
test("1111")
test("       ")
test("~~~~~")
test("abcba")
test("1")
test(" ")
test("~")
test(" ~")
test("~ ")
test("  0")
test("!@#$%^&*()ABCDEFGhijklmnop1234567890")
test(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~")
shQuote(s)
s="'"
substr(shQuote(s),1,nchar(s))
test("\\\\")
s = "\\\\"
x(s)
sQuote("'")
x = function(s){
#substr(shQuote(s),1,nchar(s))
substr(sQuote(s),1,nchar(s))
}
test = function(t){
t2 = x(t)
t2!=t & nchar(t)==nchar(t2)
}
test("X")
test("'")
test("'\"")
test("\\\\")
test('"')
test('""')
test('‘')
test('’')
test("XX")
test("YX")
test("~")
test("asdf")
test("1111")
test("       ")
test("~~~~~")
test("abcba")
test("1")
test(" ")
test("~")
test(" ~")
test("~ ")
test("  0")
test("!@#$%^&*()ABCDEFGhijklmnop1234567890")
test(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~")
sQuote("‘")
sQuote("‘")
sQuote("’")
?nchar
formatC(pi)
letters
grepl("^X",s)
grepl("^X",s)+1
s
x = function(s){
#sub(".",c("X","Y")[grepl("^X",s)+1],s)
sub(".",letters[grepl("^X",s)+1],s)
}
letters[1:2]
x = function(s){
#sub(".",c("X","Y")[grepl("^X",s)+1],s)
sub(".",letters[grepl("^a",s)+1],s)
}
test("X")
test("a")
test("b")
test("ab")
test("ba")
test("'")
test("'\"")
test("\\\\")
test('"')
test('""')
test('‘')
test('’')
test("XX")
test("YX")
test("~")
test("asdf")
test("1111")
test("       ")
test("~~~~~")
test("abcba")
test("1")
test(" ")
test("~")
test(" ~")
test("~ ")
test("  0")
test("!@#$%^&*()ABCDEFGhijklmnop1234567890")
test(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~")
x = function(s){
#sub(".",c("X","Y")[grepl("^X",s)+1],s)
sub(".",letters[grepl("^a",s)+1],s)
}
# `letters` is constant and a slightly shorter way of doing `c("a","b")`
substring(sQuote(s),2)
substring(shQuote(s),3)
x = function(s){
#substr(shQuote(s),1,nchar(s))
substr(shQuote(s),1,nchar(s))
}
test = function(t){
t2 = x(t)
t2!=t & nchar(t)==nchar(t2)
}
# Because the string might have multiple escaped characters, we need to take a substring of the correct length
# `sQuote` is shorter, but converts "‘" to "‘‘’"
test("X")
test("a")
test("b")
test("ab")
test("ba")
test("'")
test("'\"")
test("\\\\")
test('"')
test('""')
test('‘')
test('’')
test("XX")
test("YX")
test("~")
test("asdf")
test("1111")
test("       ")
test("~~~~~")
test("abcba")
test("1")
test(" ")
test("~")
test(" ~")
test("~ ")
test("  0")
test("!@#$%^&*()ABCDEFGhijklmnop1234567890")
test(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~")
shQuote("'")
testStrings = c("X","a","b","ab","ba",
"'","'\"","\\\\",'"','""',
'‘','’',"XX","YX","~","asdf",
"1111","       ","~~~~~","abcba",
"1"," ","~"," ~","~ ","  0",
"!@#$%^&*()ABCDEFGhijklmnop1234567890",
" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~")
sapply(testStrings,test)
testStrings = c("X","a","b","ab","ba",
"'","'\"","\\\\",'"','""',
'‘','’',"XX","YX","~","asdf",
"1111","       ","~~~~~","abcba",
"1"," ","~"," ~","~ ","  0",
"!@#$%^&*()ABCDEFGhijklmnop1234567890",
" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~")
all(sapply(testStrings,test))
rm(list=ls())
x = function(s){
substr(shQuote(s),1,nchar(s))
}
test = function(t){
t2 = x(t)
t2!=t & nchar(t)==nchar(t2)
}
testStrings = c("X","a","b","ab","ba",
"'","'\"","\\\\",'"','""',
'‘','’',"XX","YX","~","asdf",
"1111","       ","~~~~~","abcba",
"1"," ","~"," ~","~ ","  0",
"!@#$%^&*()ABCDEFGhijklmnop1234567890",
" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~")
all(sapply(testStrings,test))
testStrings = c("a","b","ab","ba","aa",
"'","'\"","\\\\",'"','""',
'‘','’',"~","asdf",
"1111","       ","~~~~~","abcba",
"1"," ","~"," ~","~ ","  0",
"!@#$%^&*()ABCDEFGhijklmnop1234567890",
" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~")
all(sapply(testStrings,test))
T+"F"
T+1
strsplit(s)
s="abcd"
letters[strsplit(s)=="a"]
letters[strsplit(s,'')=="a"]
strsplit(s,'')
letters[strsplit(s,'')[[1]]=="a"]
letters[el(strsplit(s,''))=="a"]
?readLines
?function
??function
x = function(s)substr(shQuote(s),1,nchar(s))
test = function(t){
t2 = x(t)
t2!=t & nchar(t)==nchar(t2)
}
testStrings = c("a","b","ab","ba","aa",
"'","'\"","\\\\",'"','""',
'‘','’',"~","asdf",
"1111","       ","~~~~~","abcba",
"1"," ","~"," ~","~ ","  0",
"!@#$%^&*()ABCDEFGhijklmnop1234567890",
" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~")
all(sapply(testStrings,test))
5820+3610
5820+916
---
title: "Colour experiment"
output:
pdf_document:
latex_engine: xelatex
toc: yes
---
\newpage
# Introduction
This analysis looks at the sign variants used in a colour naming game between signers of different sign languages meeting after 1 week of interaction and after 3 weeks of interaction.  The data was collected by Kang Suk Byun (Kang-Suk.Byun@mpi.nl).
The analysis tries to predict the relative frequency of each variant within a colour category in week 3, based on measures from week 1.
## Data
-  colour: Code of the target colour
-  colourName: English name of the target colour
-  sign: label for the variant produced
-  freq_week_1_total: Total number of occurances of the variant in the first week, across all colour contexts.
-  freq_week_4_total: Total number of occurances of the variant in the final week, across all colour contexts.
-  freq_week_1: Number of occurances of the variant used during the given target colour context in week 1.
-  freq_week_4: Number of occurances of the variant used during the given target colour context in the final week.
-  prop_week_1: Same as freq_week_1, but as a proportion of all variants used in the given colour context.
-  prop_week_4: Same as freq_week_4, but as a proportion of all variants used in the given colour context.
-  origin:  The origin language of the sign.  For many, identifying an origin is not possible, so is labelled "None"
-  iconic: Old variable
-  check: The number of times this variable was used in a checking turn.
-  indexical:  Is the variant non-indexical, indexical or indexical of the body?
-  inventedBy:  The name of the first signer to use this variant in the experiment.
-  TryMarked:  The number of times this sign was used in try-marking.
-  Teach:  The number of times this sign was explicitly taught.
-  averageLength_week_1:  Average time to produce the variant in milliseconds
-  averageTrialLength_week_1:  Average time for completing the trial for the given target colour.
-  BodyAnchor:  Is the variant body-anchored (redundant with 'indexical')
\newpage
## Poisson regression
This study uses a mixed effects regression model with poisson distributions.  Most standard regression analyses assume that the values they are trying to model come from a normal distribution, like this:
```{r echo=F}
set.seed(237)
hist(rnorm(1000, mean = 8, sd = 2), main='', xlab='Frequency', ylab='Count')
```
However, the main variable for this study is the frequency of sign variants, with a strong skew and many zero values:
```{r echo=F}
variants = read.csv('../data/processedData/variants_summary.csv', stringsAsFactors = F)
hist(variants$freq_week_4, main='', xlab='Frequency', ylab='Count', breaks=0:max(variants$freq_week_4))
```
Instead of using a normal distribution as the basis for the statistical model or transforming the data (which is difficult anyway because of the large number of zero counts), we can use a poisson distribution.  This also has the advantage of only predicting whole, non-negative numbers, which makes sense for this data because a variant can't be used half a time or a negative number of times.
# Load libraries
```{r warning=F, message=F}
library(ggplot2)
library(lme4)
library(Rmisc)
library(dplyr)
library(sjPlot)
library(gridExtra)
library(REEMtree)
```
```{r echo=F}
setwd("~/Documents/MPI/KangSukColours/ColourExperiment/analysis/")
getMEText = function(r,ef, wald=NULL, showWald=F){
AIC = r[2,]$AIC
loglikDiff = signif(diff(r$logLik),2)
chi = round(r$Chisq[2],2)
df = r$`Chi Df`[2]
p = signif(r$`Pr(>Chisq)`[2],2)
wald.text = ""
if(!is.null(wald)){
est = signif(wald[1],2)
stder = signif(wald[2],2)
t = signif(wald[3],2)
wptext = ""
wald.text =  paste("beta = ",est,",")
if(showWald){
if(!is.na(wald[4])){
wptext = paste(", Wald p =",signif(wald[4],2))
}
wald.text = paste("beta = ",est,", std.err = ",stder, ", Wald t = ",t,wptext,';')
}
}
begin = 'There was no significant'
if(p <0.09){
begin = "There was a marginal"
}
if(p < 0.05){
begin = 'There was a significant'
}
return(paste(begin,ef,"(",wald.text,"log likelihood difference =",
loglikDiff,", df = ",df,", Chi Squared =", chi,", p = ",p,")."))
}
```
# Load data
```{r}
variants = read.csv('../data/processedData/variants_summary.csv', stringsAsFactors = F)
```
There is only 1 variant for `white'.  Therefore, we remove it from this statistical analysis.
```{r}
variants = variants[variants$colourName!='white',]
```
Some variants need to be removed:
```{r}
variants = variants[!variants$sign %in%
c("SAME",
"DIFFERENT",
"DO NOT UNDERSTAND",
"UNDERSTAND",
"ME",
"YOU",
"YES",
"NOT",
"SIGNING"),]
```
Transform some variables.
```{r}
# The range of values for 'Teach' is very small:
table(variants$Teach)
# So we'll turn it into a binary category:
#  variants that were never taught and variants that were
variants$Teach = as.factor(variants$Teach >0)
# Similar for checking
variants$check.any = as.factor(variants$check>0)
variants$candidateUnderstanding.any = as.factor(variants$candidateUnderstanding>0)
variants$T0 = c("No","Check")[as.numeric(variants$check.any=="TRUE")+1]
variants$T0[variants$candidateUnderstanding.any=="TRUE"] = "Candidate Understanding"
# Collapse checks and candidate understandings
variants$T0[variants$T0 %in% c("Check","Candidate Understanding")] = "Yes"
variants$T0 = factor(variants$T0, levels = c("No","Yes"))
# ... and T-1
variants$T_minus_1.any = as.factor(variants$T_minus_1>0)
# Transform total frequency
variants$freq_week_1_total.logcenter =
log(variants$freq_week_1_total + 1)
variants$freq_week_1_total.logcenter = scale(variants$freq_week_1_total.logcenter)
# cut TryMarking into two categories
variants$TryMarked.any = as.factor(variants$TryMarked>0)
# transform length
# One extreme value is scaled down to the next highest number
variants$averageLength_week_1[
variants$averageLength_week_1>30000] =
max(variants$averageLength_week_1[
variants$averageLength_week_1<20000])
variants$averageLength_week_1.logcenter = log(variants$averageLength_week_1)
variants$averageLength_week_1.logcenter =
scale(variants$averageLength_week_1.logcenter)
variants$indexical = as.factor(variants$indexical)
# Make inventedBy deviation coding
#  (deviation from the grand mean)
variants$inventedBy = as.factor(variants$inventedBy)
#contrasts(variants$inventedBy) = contr.sum(length(levels(variants$inventedBy)))
listofsigns = variants[,c("colourName","sign")]
write.csv(listofsigns,"../results/descriptive/ListOfVariants.csv", fileEncoding = 'utf-8')
variants$indexical
ggplot(variants, aes(y = freq_week_4, x = indexical)) +
geom_boxplot()
tapply(variants$freq_week_4, )
mTryXF = glmer(freq_week_4 ~
1 +
freq_week_1_total.logcenter +
averageLength_week_1.logcenter +
indexical +
Teach +
TryMarked.any +
T0 +
T_minus_1.any +
inventedBy +
T0:freq_week_1_total.logcenter +
Teach:freq_week_1_total.logcenter +
TryMarked.any:freq_week_1_total.logcenter +
(1 + indexical || colourName) ,
data=variants, family=poisson,
control=gcontrol)
gcontrol = control=glmerControl(
optimizer = 'bobyqa',
optCtrl = list(maxfun = 1000000))
mTryXF = glmer(freq_week_4 ~
1 +
freq_week_1_total.logcenter +
averageLength_week_1.logcenter +
indexical +
Teach +
TryMarked.any +
T0 +
T_minus_1.any +
inventedBy +
T0:freq_week_1_total.logcenter +
Teach:freq_week_1_total.logcenter +
TryMarked.any:freq_week_1_total.logcenter +
(1 + indexical || colourName) ,
data=variants, family=poisson,
control=gcontrol)
finalModel = mTryXF
sjp.glmer(mTryXF,type='fe',vars=c("indexical"))
sjp.glmer(finalModel,type='fe',vars=c("indexical"))
sjp.glmer(finalModel,type='fe',vars="indexical")
summary(finalModel)
coef(finalModel)
sjp.glmer(finalModel,type='pred',vars="indexical")
ggplot(variants, aes(y = freq_week_4, x = indexical)) +
geom_boxplot()
ggplot(variants, aes(y = freq_week_4>0, x = indexical)) +
geom_boxplot()
ggplot(variants, aes(y = freq_week_4>0, x = indexical)) +
geom_bar()
table(variants$freq_week_4>0, variants$indexical)
prop.table(table(variants$freq_week_4>0, variants$indexical))
plotmeans(variants$freq_week_4~variants$inventedBy)
library(gplots)
plotmeans(variants$freq_week_4~variants$inventedBy)
sjp.glmer(finalModel,type='pred',vars="inventedBy")
?sjp.glmer
sjp.glmer(finalModel,type='fe',vars="inventedBy")
sjp.glmer(finalModel,type='fe')
sjp.glmer(finalModel,type='eff',vars="inventedBy")
sjp.glmer(finalModel,type='eff',vars="inventedBy", show.ci = T)
sjp.glmer(finalModel,type='eff',vars="inventedBy")
table(variants$freq_week_4>0, variants$inventedBy)
prop.table(table(variants$freq_week_4>0, variants$inventedBy))
table(variants$freq_week_4>0, variants$inventedBy)
table(variants$inventedBy)
tapply(variants$freq_week_4, variants$inventedBy,mean)
tapply(variants[variants$freq_week_4>0,]$freq_week_4, variants[variants$freq_week_4>0,]$inventedBy,mean)
boxplot(variants$freq_week_4,variants$inventedBy)
boxplot(variants$freq_week_4~variants$inventedBy)
boxplot(log(1+variants$freq_week_4)~variants$inventedBy)
ggplot(variants, aes(freq_week_4,colour=inventedBy)) +
geom_density()
ggplot(variants, aes(log(1+freq_week_4),colour=inventedBy)) +
geom_density()
library(ggplot2)
library(lme4)
setwd("~/Documents/MPI/KangSukColours/ColourExperiment/analysis/")
d = read.csv("../data/processedData/variants_processed.csv", stringsAsFactors = F)
d$trial_value = as.character(d$trial_value)  # legacy compatibility
colourNumbers = c("1","5",'6',"7","14",'18','24')
colourNames = c("red",'brown','white','black','green','yellow','pink')
names(colourNames) = colourNumbers
colourNamesDark = c("red", 'orange','gray', 'black', 'dark green','gold', 'pink')
d = d[d$trial_value %in% colourNumbers,]
d$trialColourName = colourNames[as.character(d$trial_value)]
d$trialColourName = factor(d$trialColourName, levels = colourNames)
pdf("../results/descriptive/graphs/AdoptedVsInvented.pdf",
width = 4, height=4)
plot(inventedBy,adopted, ylim=c(0,35), xlim=c(0,35), xlab="Number of variants invented", ylab="Number of variants adopted")
abline(0,1, col='gray')
text(inventedBy,adopted,names(inventedBy), pos=3)
dev.off()
inventedBy = tapply(d$sign_value,d$inventedBy, function(X){length(unique(X))})
freqWithinVarByInventor = tapply(variants$freq_week_4, variants$inventedBy, mean)
adopted = sapply(sort(unique(d$speakerName)), function(X){
x = d[d$speakerName==X,]$inventedBy
x2 = tapply(d[d$speakerName==X,]$sign_value, d[d$speakerName==X,]$inventedBy, function(z){length(unique(z))})
sum(x2[names(x2)!=X])
})
pdf("../results/descriptive/graphs/AdoptedVsInvented.pdf",
width = 4, height=4)
plot(inventedBy,adopted, ylim=c(0,35), xlim=c(0,35), xlab="Number of variants invented", ylab="Number of variants adopted")
abline(0,1, col='gray')
text(inventedBy,adopted,names(inventedBy), pos=3)
dev.off()
pdf("../results/descriptive/graphs/AdoptedVsInvented.pdf",
width = 4, height=4)
plot(inventedBy,adopted, ylim=c(10,35), xlim=c(10,35), xlab="Number of variants invented", ylab="Number of variants adopted")
abline(0,1, col='gray')
text(inventedBy,adopted,names(inventedBy), pos=3)
dev.off()
cor.test(inventedBy,adopted)
ggplot(variants[variants$colourName %in% c("red","brown"),],
aes(x=indexical,y=freq_week_4))
ggplot(variants[variants$colourName %in% c("red","brown"),],
aes(x=indexical,y=freq_week_4)) + geom_boxplot()
ggplot(variants[variants$colourName %in% c("red","brown"),],
aes(x=indexical,y=freq_week_4)) + geom_density()
ggplot(variants[variants$colourName %in% c("red","brown"),],
aes(colour=indexical,x=freq_week_4)) + geom_density()
ggplot(variants[variants$colourName %in% c("red","brown"),],
aes(x=indexical,y=freq_week_4)) + geom_violin()
ggplot(variants,
aes(x=indexical,y=freq_week_4)) + geom_violin()
ggplot(variants[variants$colourName!="pink",],
aes(x=indexical,y=freq_week_4)) + geom_violin()
ggplot(variants[!variants$colourName%in% c("red","brown"),],
aes(x=indexical,y=freq_week_4)) + geom_violin()
ggplot(variants[variants$colourName %in% c("red","brown"),],
aes(x=indexical,y=freq_week_4)) + geom_violin()
ggplot(variants[variants$colourName %in% c("red","brown"),],
aes(x=indexical,y=freq_week_4)) + geom_violin() +
xlab("Indexicaltiy") +
ylab("Final week frequency")
ggplot(variants[variants$colourName %in% c("red","brown"),],
aes(x=indexical,y=freq_week_4)) + geom_violin() +
xlab("Indexicaltiy") +
ylab("Final week frequency") +
ggtitle("Data for RED and BROWN")
pdf("../results/descriptive/graphs/Indexicality_RedBrown.pdf",
width=4.5,height=4)
ggplot(variants[variants$colourName %in% c("red","brown"),],
aes(x=indexical,y=freq_week_4)) + geom_violin() +
xlab("Indexicaltiy") +
ylab("Final week frequency") +
ggtitle("Data for RED and BROWN")
dev.off()
