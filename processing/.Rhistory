axis(1,at=1:2,labels = c("High","Low"))
legend(1.8,0.3,legend = c("Yes","No"),col=2:1, title = "Teach", lty=1, pch=1)
variants
variants[variants$colourName=="white"]
variants[variants$colourName=="white",]
variants = read.csv('../data/processedData/variants_summary.csv', stringsAsFactors = F)
variants[variants$colourName=="white",]
meanx = tapply(variants$freq_week_4_withinColour, paste(variants$TryMarked.cat, variants$Teach), mean)
variants[variants$colourName=="white",]
meanx
paste(variants$TryMarked.cat, variants$Teach)
variants = read.csv('../data/processedData/variants_summary.csv', stringsAsFactors = F)
```
There were only 2 variants for `white', and one of those only appeared once.  Therefore, we remove it from this statistical analysis.
```{r}
variants = variants[variants$colourName!='white',]
```
Transform some variables.
```{r}
variants$Teach = variants$Teach >0
variants$check.any = variants$check>0
variants$freq_week_1.logcenter = log(variants$freq_week_1 + 1)
variants$freq_week_1.logcenter =
variants$freq_week_1.logcenter - mean(variants$freq_week_1.logcenter)
# cut TryMarking into two categories
variants$TryMarked.cat = cut(variants$TryMarked,
c(-Inf,3,Inf),
labels = c("Low",'High'))
variants$averageLength_week_1.logcenter = log(variants$averageLength_week_1)
variants$averageLength_week_1.logcenter =
variants$averageLength_week_1.logcenter -
mean(variants$averageLength_week_1.logcenter)
meanx = tapply(variants$freq_week_4_withinColour, paste(variants$TryMarked.cat, variants$Teach), mean)
meanx
table(variants$Teach)
summary(m8)
table(variants$Teach)
table(variants$Teach, variants$colourName)
varYellowPink = variants[variants$colourName %in% c("yellow","pink"),]
varYellowPink = variants[variants$colourName %in% c("yellow","pink"),]
meanx = tapply(varYellowPink$freq_week_4_withinColour, paste(varYellowPink$TryMarked.cat, varYellowPink$Teach), mean)
plot(c(1,1,2,2),meanx, col=c(1,2,1,2), xlab="Try Marked", xaxt='n')
lines(c(1,2),y=meanx[c(1,3)])
lines(c(1,2),y=meanx[c(2,4)], col=2)
axis(1,at=1:2,labels = c("High","Low"))
legend(1.8,0.3,legend = c("Yes","No"),col=2:1, title = "Teach", lty=1, pch=1)
varYellowPink = variants[!variants$colourName %in% c("yellow","pink"),]
meanx = tapply(varYellowPink$freq_week_4_withinColour, paste(varYellowPink$TryMarked.cat, varYellowPink$Teach), mean)
plot(c(1,1,2,2),meanx, col=c(1,2,1,2), xlab="Try Marked", xaxt='n')
lines(c(1,2),y=meanx[c(1,3)])
lines(c(1,2),y=meanx[c(2,4)], col=2)
axis(1,at=1:2,labels = c("High","Low"))
legend(1.8,0.3,legend = c("Yes","No"),col=2:1, title = "Teach", lty=1, pch=1)
variants[variants$Teach,])
plotmeans(freq_week_4_withinColour~TryMarked.cat,
variants[variants$Teach,])
library(gplots)
plotmeans(freq_week_4_withinColour~TryMarked.cat,
variants[variants$Teach,])
plotmeans(freq_week_4_withinColour~TryMarked.cat,
variants[!variants$Teach,], add=T)
variants[variants$Teach,], ylim=c(0,0.5))
plotmeans(freq_week_4_withinColour~TryMarked.cat,
variants[!variants$Teach,], add=T)
plotmeans(freq_week_4_withinColour~TryMarked.cat,
variants[variants$Teach,], ylim=c(0,0.5))
plotmeans(freq_week_4_withinColour~TryMarked.cat,
variants[!variants$Teach,], add=T)
plotmeans(freq_week_4_withinColour~TryMarked.cat,
variants[variants$Teach,], ylim=c(0,0.5))
plotmeans(freq_week_4_withinColour~TryMarked.cat,
variants[!variants$Teach,], add=T, col=2, barcol = 2)
setwd("~/Documents/MPI/KangSukColours/ColourExperiment/processing/")
colourNumbers = c("1","5","7","14",'18','24','6')
colourNames = c("red",'brown','black','green','yellow','pink','white')
names(colourNames) = colourNumbers
colourNamesDark = c("dark red", 'orange', 'dark gray', 'dark green','gold', 'purple','gray')
checkIconicity = function(x){
tx = table(x[x!=''])
if(length(tx)==0){
return(NA)
}
if(length(tx)==1){
return(names(tx)[1])
} else{
print(paste("Warning: different iconicity values for sign"))
print(tx)
return(names(sort(tx,decreasing = T))[1])
}
}
getDetails = function(x){
x = strsplit(x,"_")[[1]]
y = strsplit(x[5],"-")[[1]]
return(c(week=as.numeric(x[3]), session=as.numeric(x[4]),y[1],y[2]))
}
findOverlaps = function(rangesA){
overlaps = sapply(1:nrow(rangesA), function(i){
# if start or end is within range, then findInterval returns 1,
# so multiplying should only return 1 if BOTH are
startO= findInterval(rangesA[,1], c(rangesA[i,1],rangesA[i,2]))
endO = findInterval(rangesA[,2], c(rangesA[i,1],rangesA[i,2]))
(startO==1) | (endO==1)
})
ret = data.frame(which(overlaps==1, arr.ind = T))
ret = ret[ret[,1]!=ret[,2],]
if(nrow(ret)==0){
return(NA)
}
ret = data.frame(t(apply(ret, 1, function(X){
c(rangesA[X[1],], rangesA[X[2],])
})))
ret = ret[(ret[,2] - ret[,3]) != 0,]
names(ret) = c("TrialA_start","TrialA_end","TrialB_start","TrialB_end")
return(ret)
}
d = read.csv("../data/processedData/variants.csv", stringsAsFactors = F, quote='')
d[,c("week",'session','part1','part2')] = t(sapply(d$filename,getDetails))
d$week = as.numeric(d$week)
d = d[order(d$week,d$session,d$sign_start),]
#d = d[d$sign_value!='SAME',]
d = d[d$sign_value!='',]
d = d[d$sign_value!='?',]
d$sign_value = gsub("^ ","", d$sign_value)
d$sign_value = gsub(" $","", d$sign_value)
d$sign_value = gsub("[!\\?\t]","", d$sign_value)
d$sign_value = toupper(d$sign_value)
# Edit signs
source("signChanges.R")
for(i in 1:length(signChanges)){
if(signChanges[[i]][1] %in% d$sign_value){
d[d$sign_value==signChanges[[i]][1]
& !is.na(d$sign_value),]$sign_value = signChanges[[i]][2]
}
}
d = d[!is.na(d$sign_value),]
d$sign_value = gsub("^ ","", d$sign_value)
d$sign_value = gsub(" $","", d$sign_value)
d$sign_value = gsub("[!\\?\t]","", d$sign_value)
d$sign_value = toupper(d$sign_value)
# Edit colour trial names
d$trial_value = gsub("[^0-9]+"," ",d$trial_value)
d$trial_value = sapply(d$trial_value, function(X){
strsplit(X," ")[[1]][1]
})
#####
# Find any trials that are overlapping
overlaps = sapply(unique(d$filename),function(X){
dx = d[d$filename==X,]
dx = dx[!duplicated(dx$trial_start),]
findOverlaps(cbind(dx$trial_start,dx$trial_end))
})
overlaps[!is.na(overlaps)]
# make sure that all iconicity ratings are the same
d$iconic[d$iconic==""] = NA
ndiff = tapply(d$iconic, d$sign_value, function(x){(length(unique(x[!is.na(x)])))})
names(ndiff) = tapply(d$sign_value, d$sign_value, function(x){head(x,1)})
ndiff[ndiff>1]
iconicityMeasures = tapply(d$iconic, d$sign_value, checkIconicity)
d$iconic = iconicityMeasures[d$sign_value]
# Check indexicality
# One case:
d$Indexicality[d$Indexicality==""] = "Yes"
d$Indexicality[d$Indexicality=="yes"] = "Yes"
d$Indexicality[d$Indexicality=="no"] = "No"
d$Indexicality[d$Indexicality=="yes-body"] = "Yes-body"
#  Try marking
d$TryMarked = d$TryMarked=="Yes"
d$TryMarked[is.na(d$TryMarked)] = F
# Teaching
d$Teach = d$Teach == "Yes"
d$Teach[is.na(d$Teach)] = F
# trial lengths
trialLengths = tapply(d$trial_length,d$trial_start,head,n=1)/1000
trialStart = tapply(d$trial_start,d$trial_start,head,n=1)/1000
plot(trialLengths~trialStart)
plot(d$sign_length~d$sign_start)
#boxplot(d$sign_length~d$iconic, ylab='Sign duration', xlab='Iconic')
d2 = d[order(d$week,d$session, d$sign_start),]
sel = d2$trial_value=='19' & !d2$T0Check & nchar(d2$sign_value)>0
signs  = unique(d2[sel,]$sign_value)
set.seed(1211)
cols = sample(rainbow(length(signs)))
names(cols) = signs
plot(rank(d2[sel,]$sign_start),rep(1,sum(sel)), col=cols[d2[sel,]$sign_value], pch=16)
tapply(d$sign_value, d$week, function(X){length(unique(X))})
d$speaker = as.numeric(d$speaker)
d$speakerName = sapply(1:nrow(d),function(X){
d[X,c("part1","part2")][,d$speaker[X]]
})
inventedBy = tapply( d$speakerName, d$sign_value, head,n=1)
d$inventedBy = inventedBy[d$sign_value]
d$IX = grepl("IX",d$sign_notes)
d$OS = grepl("OS",d$sign_notes)
d$LW = grepl("LW",d$sign_notes)
d$SE = grepl("SE",d$sign_notes)
# absolute frequency
d$freq_week_4 = tapply(d[d$week==4,]$sign_value,d[d$week==4,]$sign_value, length)[d$sign_value]
# relative frequency, compared to other competitiors for the same colour
d$freq_week4_withinColour = NA
for(colx in colourNumbers){
d$freq_week4_withinColour[d$trial_value==colx] = 0
dx = d[d$trial_value==colx & d$week==4, ]
tx = table(dx$sign_value)
tx = tx / sum(tx)
d[d$trial_value==colx & d$week==4,]$freq_week4_withinColour = tx[d[d$trial_value==colx & d$week==4,]$sign_value]
}
variants = data.frame()
for(colourID in colourNumbers){
d2 =d[d$trial_value==colourID & nchar(d2[d2$week==1,]$sign_value)>0,]
v = data.frame(colour=colourID, colourName = colourNames[which(colourNumbers==colourID)],sign=unique(d2[d2$week==1,]$sign_value), stringsAsFactors = F)
v$freq_week_1 = table(d2[d2$week==1,]$sign_value)[v$sign]
v$freq_week_4 = table(d2[d2$week==4,]$sign_value)[v$sign]
v$freq_week_1_withinColour = 0
v$freq_week_4_withinColour = 0
signCounts = table(d2[d2$week==1,]$sign_value)
signCounts = signCounts / sum(signCounts)
v[v$sign %in% names(signCounts),]$freq_week_1_withinColour = signCounts[v[v$sign %in% names(signCounts),]$sign]
signCounts = table(d2[d2$week==4,]$sign_value)
signCounts = signCounts / sum(signCounts)
v[v$sign %in% names(signCounts),]$freq_week_4_withinColour = signCounts[v[v$sign %in% names(signCounts),]$sign]
v$origin = tapply(d2$signOrigin, d2$sign_value, function(X){
X= X[!is.na(X)]
X = X[X!=""]
if(length(X)==0){
return("None")
}
if(length(unique(X))>1){
return("Mixed")
}
return(X[1])
})[v$sign]
v$iconic = tapply(d2$iconic, d2$sign_value, head,n=1)[v$sign]
#v$check = tapply(d2[d2$week==1,]$T0Check,d2[d2$week==1,]$sign_value,function(X){sum(X,na.rm=T)>0})[v$sign]
v$check = tapply(d2[d2$week==1,]$T0Check,d2[d2$week==1,]$sign_value,sum, na.rm=T)[v$sign]
indexical = tapply(d2$Indexicality,d2$sign_value,function(X){
x = table(X)
names(x)[which(x==max(x))[1]]
})
#indexical[is.null(indexical)] = "No"
v$indexical = unlist(indexical)[v$sign]
v$indexical[is.na(v$indexical)] = "No"
v$inventedBy= tapply(d2$inventedBy, d2$sign_value, head, n=1)[v$sign]
v$TryMarked = tapply(d2$TryMarked, d2$sign_value, sum, na.rm=T)[v$sign]
v$TryMarked = tapply(d2$TryMarked, d2$sign_value, sum, na.rm=T)[v$sign]
v$Teach = tapply(d2$Teach, d2$sign_value, sum, na.rm=T)[v$sign]
v$averageLength_week_1 = tapply(d2[d2$week==1,]$sign_length, d2[d2$week==1,]$sign_value, mean)
v$averageTrialLength_week_1 = tapply(d2[d2$week==1,]$trial_length, d2[d2$week==1,]$sign_value, mean)
variants = rbind(variants,v)
}
variants$iconic[is.na(variants$iconic)] = "No"
variants$freq_week_4[is.na(variants$freq_week_4)] = 0
b = read.delim("../data/otherData/SignProperties.tab", sep='\t', encoding = 'utf-8', stringsAsFactors = F)
b$Sign = gsub("^ ","", b$Sign)
b$Sign = gsub(" $","", b$Sign)
b$Sign = toupper(b$Sign)
for(i in 1:length(signChanges)){
if(signChanges[[i]][1] %in% b$Sign){
b[b$Sign==signChanges[[i]][1]
& !is.na(b$Sign),]$Sign = signChanges[[i]][2]
}
}
variants$BodyAnchor = b[match(variants$sign, b$Sign),]$Body.Anchor
write.csv(variants,file='../data/processedData/variants_summary.csv')
allTargetVars = sort(unique(d[d$trial_value %in% colourNumbers,]$sign_value))
cat(
paste(paste('"',allTargetVars,'"',sep=''),collapse='\n'),
file="../processing/ListOfVariants.txt")
write.csv(d, file="../data/processedData/variants_processed.csv")
d[d$sign_value=="T0보다 CHECK쪽이 맞음",]
68400 / 1000
(68400 / 1000)/60
anova(m0,m1,m2,m3,m4,m5, m6,m7,m8)
table(variants$TryMarked,variants$colourName)
setwd("~/Documents/MPI/KangSukColours/ColourExperiment/processing/")
millisecondsToReadbleTime = function(t){
seconds = floor((t/1000)) %% 60
minutes = floor((t/1000)/60)
return(paste(minutes,"min",seconds,"sec"))
}
d = read.csv("../data/processedData/variants_processed.csv", stringsAsFactors = F)
colourNumbers = as.numeric(c("1","5","7","14",'18','24','6'))
d = d[d$trial_value %in% colourNumbers,]
d$trialString = paste(d$filename, d$trialID, d$trial_start)
##
totalTime = sum(tapply(d$trial_length, d$trialString, head,n=1))
(totalTime/1000)/60 #minutes
totalTime_w1 = sum(tapply(d[d$week==1,]$trial_length, d[d$week==1,]$trialString, head,n=1))
sampleTime = totalTime*0.2 #seconds
selTime = 0
selectedTrials = data.frame(filename="",start=0,end=0, stringsAsFactors = F)
set.seed(23389)
while(selTime < sampleTime){
selectedTrial = d[sample(1:nrow(d),1),]
selectedTrials = rbind(
selectedTrials,
c(selectedTrial$filename,
millisecondsToReadbleTime(selectedTrial$trial_start),
millisecondsToReadbleTime(selectedTrial$trial_end))
)
selTime = selTime + selectedTrial$trial_length
}
selectedTrials = selectedTrials[2:nrow(selectedTrials),]
write.csv(selectedTrials,file="../processing/RandomTrialsForCoding_byTime.csv")
dr = d[d$week==1 & d$trial_value %in% colourNumbers,]
set.seed(2387)
rw1 = sample(unique(dr$trialString),10)
#ceiling(length(unique(dr$trialString))*0.1))
rw1[1] = sample(unique(dr[dr$trial_value==14,]$trialString),1)
sel = d[d$trialString %in% rw1,]
ransel = data.frame(
filename = sel$filename,
colour = sel$trial_value,
start=millisecondsToReadbleTime(sel$trial_start),
end=millisecondsToReadbleTime(sel$trial_end))
ransel = ransel[!duplicated(ransel),]
write.csv(ransel,"../processing/RandomTrials.csv")
###
# Random variants
d2 = d[d$trial_value %in% colourNumbers,]
d2 = d2[d2$trial_value !=6,]
d2 = d2[!d2$sign_value %in%
c("SAME",
"DIFFERENT",
"DO NOT UNDERSTAND",
"UNDERSTAND",
"ME",
"YOU",
"YES",
"NOT",
"SIGNING"),]
dim(d2)
# There are 489 variant tokens coded
sel.n = 42
set.seed(2398)
d2 = d2[sample(1:nrow(d2),sel.n),]
d2 = d2[,c("X","filename",'trialID','trial_value','sign_start','sign_end','speakerName')]
d2$sign_startms = d2$sign_start
d2$sign_start = millisecondsToReadbleTime(d2$sign_start)
d2$sign_endms = d2$sign_end
d2$sign_end = millisecondsToReadbleTime(d2$sign_end)
d2 = d2[order(d2$filename,d2$sign_start),]
write.csv(d2, "../processing/RandomVariants.csv")
dim(d)
d2 = d[d$trial_value %in% colourNumbers,]
d2 = d2[d2$trial_value !=6,]
d2 = d2[!d2$sign_value %in%
c("SAME",
"DIFFERENT",
"DO NOT UNDERSTAND",
"UNDERSTAND",
"ME",
"YOU",
"YES",
"NOT",
"SIGNING"),]
dim(d2)
dim(d2)
# There are 489 variant tokens coded
sel.n = 42
set.seed(2398)
d2 = d2[sample(1:nrow(d2),sel.n),]
d2 = d2[,c("X","filename",'trialID','trial_value','sign_start','sign_end','speakerName')]
d2$sign_startms = d2$sign_start
d2$sign_start = millisecondsToReadbleTime(d2$sign_start)
d2$sign_endms = d2$sign_end
d2$sign_end = millisecondsToReadbleTime(d2$sign_end)
d2 = d2[order(d2$filename,d2$sign_start),]
head(d2)
setwd("~/Documents/MPI/KangSukColours/ColourExperiment/processing/")
millisecondsToReadbleTime = function(t){
seconds = floor((t/1000)) %% 60
minutes = floor((t/1000)/60)
return(paste(minutes,"min",seconds,"sec"))
}
d = read.csv("../data/processedData/variants_processed.csv", stringsAsFactors = F)
colourNumbers = as.numeric(c("1","5","7","14",'18','24','6'))
d = d[d$trial_value %in% colourNumbers,]
d$trialString = paste(d$filename, d$trialID, d$trial_start)
##
totalTime = sum(tapply(d$trial_length, d$trialString, head,n=1))
(totalTime/1000)/60 #minutes
totalTime_w1 = sum(tapply(d[d$week==1,]$trial_length, d[d$week==1,]$trialString, head,n=1))
sampleTime = totalTime*0.2 #seconds
selTime = 0
selectedTrials = data.frame(filename="",start=0,end=0, stringsAsFactors = F)
set.seed(23389)
while(selTime < sampleTime){
selectedTrial = d[sample(1:nrow(d),1),]
selectedTrials = rbind(
selectedTrials,
c(selectedTrial$filename,
millisecondsToReadbleTime(selectedTrial$trial_start),
millisecondsToReadbleTime(selectedTrial$trial_end))
)
selTime = selTime + selectedTrial$trial_length
}
selectedTrials = selectedTrials[2:nrow(selectedTrials),]
write.csv(selectedTrials,file="../processing/RandomTrialsForCoding_byTime.csv")
dr = d[d$week==1 & d$trial_value %in% colourNumbers,]
set.seed(2387)
rw1 = sample(unique(dr$trialString),10)
#ceiling(length(unique(dr$trialString))*0.1))
rw1[1] = sample(unique(dr[dr$trial_value==14,]$trialString),1)
sel = d[d$trialString %in% rw1,]
ransel = data.frame(
filename = sel$filename,
colour = sel$trial_value,
start=millisecondsToReadbleTime(sel$trial_start),
end=millisecondsToReadbleTime(sel$trial_end))
ransel = ransel[!duplicated(ransel),]
write.csv(ransel,"../processing/RandomTrials.csv")
###
# Random variants
d2 = d[d$trial_value %in% colourNumbers,]
d2 = d2[d2$trial_value !=6,]
d2 = d2[!d2$sign_value %in%
c("SAME",
"DIFFERENT",
"DO NOT UNDERSTAND",
"UNDERSTAND",
"ME",
"YOU",
"YES",
"NOT",
"SIGNING"),]
dim(d2)
# There are 489 variant tokens coded
sel.n = 42
d2Orig = d2
set.seed(2398)
d2 = d2[sample(1:nrow(d2),sel.n),]
d2 = d2[,c("X","filename",'trialID','trial_value','sign_start','sign_end','speakerName')]
d2$sign_startms = d2$sign_start
d2$sign_start = millisecondsToReadbleTime(d2$sign_start)
d2$sign_endms = d2$sign_end
d2$sign_end = millisecondsToReadbleTime(d2$sign_end)
d2 = d2[order(d2$filename,d2$sign_start),]
write.csv(d2, "../processing/RandomVariants.csv")
rowsToSample = d2Orig[d2Orig$week==1,]$X
rowsToSample = rowsToSample[!rowsToSample %in% d2$X]
d2b = d2Orig[match(rowsToSample,d2Orig$X),]
d2b$weight = 0.0000001
d2b[d2b$TryMarked,]$weight = 0.290^4
d2b[d2b$CandidateUnderstanding=="Yes",]$weight = 3^4
d2b[d2b$T0,]$weight = 0.533^4
d2b[d2b$T_minus_1,]$weight = 0.5619^4
d2b[d2b$Teach,]$weight = 1.5^4
d2b$weight = 0.0000001
d2b$weight = (as.numeric(d2b$TryMarked) * 0.01) +
(as.numeric(d2b$CandidateUnderstanding=="Yes") * 0.9523) +
(as.numeric(d2b$T0) * 0.733) +
(as.numeric(d2b$T_minus_1) * 0.7619) +
(as.numeric(d2b$Teach) * 2.9761)
d2b$weight = d2b$weight^3
set.seed(33278)
d2b = d2b[sample(1:nrow(d2b), 20, prob = d2b$weight),]
# try marking fine
# more teaching and CU
table(d2b$Teach)
table(d2b$T0)
table(d2b$CandidateUnderstanding)
table(d2b$TryMarked)
table(d2b$T_minus_1)
d2b = d2b[,c("X","filename",'trialID','trial_value','sign_start','sign_end','speakerName')]
d2b$sign_startms = d2b$sign_start
d2b$sign_start = millisecondsToReadbleTime(d2b$sign_start)
d2b$sign_endms = d2b$sign_end
d2b$sign_end = millisecondsToReadbleTime(d2b$sign_end)
d2b = d2b[order(d2b$filename,d2b$sign_start),]
write.csv(d2b, "../processing/RandomVariants_SecondRound.csv")
##
# ROUND 3
d3 = d2Orig[(!d2Orig$X %in% d2b$X) & (!d2Orig$X %in% sel$X),]
d3 = d3[grepl("one_week",d3$filename),]
# Select 50
set.seed(3289)
d3 = d3[sample(1:nrow(d3),50),]
# Random order
d3 = d3[sample(1:nrow(d3)),]
write.csv(d3[,c("X","filename",'trialID','trial_value','sign_start','sign_end','speakerName')],
"../processing/RandomVariants_ThirdRound.csv",
fileEncoding = 'utf-8')
#####
d3 = d2Orig[(!d2Orig$X %in% d2b$X) & (!d2Orig$X %in% sel$X),]
d3 = d3[grepl("one_week",d3$filename),]
nx = 6
set.seed(23897)
TryMarkedT = sample(d3[d3$TryMarked,]$X,nx)
TryMarkedF = sample(d3[!d3$TryMarked,]$X,nx)
T0T = sample(d3[d3$T0,]$X,nx)
T0F = sample(d3[!d3$T0,]$X,nx)
T_minus_1T = sample(d3[d3$T_minus_1,]$X,nx)
T_minus_1F = sample(d3[!d3$T_minus_1,]$X,nx)
TeachT = sample(d3[d3$Teach,]$X,4)
TeachF = sample(d3[!d3$Teach,]$X,nx)
chosenTurns = c(TryMarkedT,TryMarkedF,
T0T,T0F,
T_minus_1T ,T_minus_1F,
TeachT, TeachF)
turns_for_sean = d3[d3$X %in% chosenTurns,
c("X","filename",'trialID','trial_value','sign_start','sign_end','speakerName',
"TryMarked","T0","T_minus_1","Teach")]
turns_for_sean = turns_for_sean[order(turns_for_sean$filename,turns_for_sean$sign_start),]
turns_for_connie = turns_for_sean
turns_for_connie$TryMarked = "?"
turns_for_connie$T0 = "?"
turns_for_connie$T_minus_1 = "?"
turns_for_connie$Teach = "?"
turns_for_connie$sign_start2 = millisecondsToReadbleTime(turns_for_connie$sign_start)
turns_for_connie$sign_end2 = millisecondsToReadbleTime(turns_for_connie$sign_end)
write.csv(turns_for_connie,"RandomVariants_Balanced_ForConnie.csv")
write.csv(turns_for_sean,"RandomVariants_Balanced_ForSean.csv")
