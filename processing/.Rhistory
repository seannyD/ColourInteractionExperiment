d$freq_week4_withinColour = NA
for(colx in colourNumbers){
d$freq_week4_withinColour[d$trial_value==colx] = 0
dx = d[d$trial_value==colx & d$week==4, ]
tx = table(dx$sign_value)
tx = tx / sum(tx)
d[d$trial_value==colx & d$week==4,]$freq_week4_withinColour = tx[d[d$trial_value==colx & d$week==4,]$sign_value]
}
variants = data.frame()
for(colourID in colourNumbers){
d2 =d[d$trial_value==colourID & nchar(d2[d2$week==1,]$sign_value)>0,]
v = data.frame(colour=colourID, colourName = colourNames[which(colourNumbers==colourID)],sign=unique(d2[d2$week==1,]$sign_value), stringsAsFactors = F)
v$freq_week_1 = table(d2[d2$week==1,]$sign_value)[v$sign]
v$freq_week_4 = table(d2[d2$week==4,]$sign_value)[v$sign]
v$freq_week_1_withinColour = 0
v$freq_week_4_withinColour = 0
signCounts = table(d2[d2$week==1,]$sign_value)
signCounts = signCounts / sum(signCounts)
v[v$sign %in% names(signCounts),]$freq_week_1_withinColour = signCounts[v[v$sign %in% names(signCounts),]$sign]
signCounts = table(d2[d2$week==4,]$sign_value)
signCounts = signCounts / sum(signCounts)
v[v$sign %in% names(signCounts),]$freq_week_4_withinColour = signCounts[v[v$sign %in% names(signCounts),]$sign]
v$iconic = tapply(d2$iconic, d2$sign_value, head,n=1)[v$sign]
v$check = tapply(d2[d2$week==1,]$T0Check,d2[d2$week==1,]$sign_value,function(X){sum(X,na.rm=T)>0})[v$sign]
v$inventedBy= tapply(d2$inventedBy, d2$sign_value, head, n=1)[v$sign]
v$averageLength_week_1 = tapply(d2[d2$week==1,]$sign_length, d2[d2$week==1,]$sign_value, mean)
v$averageTrialLength_week_1 = tapply(d2[d2$week==1,]$trial_length, d2[d2$week==1,]$sign_value, mean)
variants = rbind(variants,v)
}
variants$iconic[is.na(variants$iconic)] = "No"
variants$freq_week_4[is.na(variants$freq_week_4)] = 0
b = read.delim("../data/otherData/SignProperties.tab", sep='\t', encoding = 'utf-8', stringsAsFactors = F)
b[b$Sign=="FOLWER",]$Sign = "FLOWER"
b[b$Sign=="BIGHT",]$Sign = "BRIGHT"
b[b$Sign=="SIGINING",]$Sign = "SIGNING"
b$Sign = gsub("^ ","", b$Sign)
b$Sign = gsub(" $","", b$Sign)
b$Sign = toupper(b$Sign)
variants$BodyAnchor = b[match(variants$sign, b$Sign),]$Body.Anchor
write.csv(variants,file='../data/processedData/variants_summary.csv')
allTargetVars = sort(unique(d[d$trial_value %in% colourNumbers,]$sign_value))
cat(
paste(paste('"',allTargetVars,'"',sep=''),collapse='\n'),
file="../processing/ListOfVariants.txt")
write.csv(d, file="../data/processedData/variants_processed.csv")
setwd("~/Documents/MPI/KangSukColours/ColourExperiment/processing/")
colourNumbers = c("1","5","7","14",'18','24')
colourNames = c("red",'brown','black','green','yellow','pink')
names(colourNames) = colourNumbers
colourNamesDark = c("dark red", 'orange', 'gray', 'dark green','gold', 'purple')
checkIconicity = function(x){
tx = table(x[x!=''])
if(length(tx)==0){
return(NA)
}
if(length(tx)==1){
return(names(tx)[1])
} else{
print(paste("Warning: different iconicity values for sign"))
print(tx)
return(names(sort(tx,decreasing = T))[1])
}
}
getDetails = function(x){
x = strsplit(x,"_")[[1]]
y = strsplit(x[5],"-")[[1]]
return(c(week=as.numeric(x[3]), session=as.numeric(x[4]),y[1],y[2]))
}
d = read.csv("../data/processedData/variants.csv", stringsAsFactors = F, quote='')
d[,c("week",'session','part1','part2')] = t(sapply(d$filename,getDetails))
d$week = as.numeric(d$week)
d = d[order(d$week,d$session,d$sign_start),]
#d = d[d$sign_value!='SAME',]
d = d[d$sign_value!='',]
d = d[d$sign_value!='?',]
d[d$sign_value=="FOLWER",]$sign_value = "FLOWER"
d[d$sign_value=="BIGHT",]$sign_value = "BRIGHT"
d[d$sign_value=="SIGINING",]$sign_value = "SIGNING"
d$sign_value = gsub("^ ","", d$sign_value)
d$sign_value = gsub(" $","", d$sign_value)
d$sign_value = toupper(d$sign_value)
# make sure that all iconicity ratings are the same
d$iconic[d$iconic==""] = NA
ndiff = tapply(d$iconic, d$sign_value, function(x){(length(unique(x[!is.na(x)])))})
names(ndiff) = tapply(d$sign_value, d$sign_value, function(x){head(x,1)})
ndiff[ndiff>1]
iconicityMeasures = tapply(d$iconic, d$sign_value, checkIconicity)
d$iconic = iconicityMeasures[d$sign_value]
# trial lengths
trialLengths = tapply(d$trial_length,d$trial_start,head,n=1)/1000
trialStart = tapply(d$trial_start,d$trial_start,head,n=1)/1000
plot(trialLengths~trialStart)
plot(d$sign_length~d$sign_start)
#boxplot(d$sign_length~d$iconic, ylab='Sign duration', xlab='Iconic')
d2 = d[order(d$week,d$session, d$sign_start),]
sel = d2$trial_value=='19' & !d2$T0Check & nchar(d2$sign_value)>0
signs  = unique(d2[sel,]$sign_value)
set.seed(1211)
cols = sample(rainbow(length(signs)))
names(cols) = signs
plot(rank(d2[sel,]$sign_start),rep(1,sum(sel)), col=cols[d2[sel,]$sign_value], pch=16)
tapply(d$sign_value, d$week, function(X){length(unique(X))})
head(d)
d$speakerName = sapply(1:nrow(d),function(X){
d[X,c("part1","part2")][,d$speaker[X]]
})
X = 1
d[X,c("part1","part2")][,d$speaker[X]]
d$speaker[X]
d$speaker
d$speaker
setwd("~/Documents/MPI/KangSukColours/ColourExperiment/processing/")
colourNumbers = c("1","5","7","14",'18','24')
colourNames = c("red",'brown','black','green','yellow','pink')
names(colourNames) = colourNumbers
colourNamesDark = c("dark red", 'orange', 'gray', 'dark green','gold', 'purple')
checkIconicity = function(x){
tx = table(x[x!=''])
if(length(tx)==0){
return(NA)
}
if(length(tx)==1){
return(names(tx)[1])
} else{
print(paste("Warning: different iconicity values for sign"))
print(tx)
return(names(sort(tx,decreasing = T))[1])
}
}
getDetails = function(x){
x = strsplit(x,"_")[[1]]
y = strsplit(x[5],"-")[[1]]
return(c(week=as.numeric(x[3]), session=as.numeric(x[4]),y[1],y[2]))
}
d = read.csv("../data/processedData/variants.csv", stringsAsFactors = F, quote='')
d[,c("week",'session','part1','part2')] = t(sapply(d$filename,getDetails))
d$week = as.numeric(d$week)
d = d[order(d$week,d$session,d$sign_start),]
#d = d[d$sign_value!='SAME',]
d = d[d$sign_value!='',]
d = d[d$sign_value!='?',]
d[d$sign_value=="FOLWER",]$sign_value = "FLOWER"
d[d$sign_value=="BIGHT",]$sign_value = "BRIGHT"
d[d$sign_value=="SIGINING",]$sign_value = "SIGNING"
d$sign_value = gsub("^ ","", d$sign_value)
d$sign_value = gsub(" $","", d$sign_value)
d$sign_value = toupper(d$sign_value)
# make sure that all iconicity ratings are the same
d$iconic[d$iconic==""] = NA
ndiff = tapply(d$iconic, d$sign_value, function(x){(length(unique(x[!is.na(x)])))})
names(ndiff) = tapply(d$sign_value, d$sign_value, function(x){head(x,1)})
ndiff[ndiff>1]
iconicityMeasures = tapply(d$iconic, d$sign_value, checkIconicity)
d$iconic = iconicityMeasures[d$sign_value]
# trial lengths
trialLengths = tapply(d$trial_length,d$trial_start,head,n=1)/1000
trialStart = tapply(d$trial_start,d$trial_start,head,n=1)/1000
plot(trialLengths~trialStart)
plot(d$sign_length~d$sign_start)
#boxplot(d$sign_length~d$iconic, ylab='Sign duration', xlab='Iconic')
d2 = d[order(d$week,d$session, d$sign_start),]
sel = d2$trial_value=='19' & !d2$T0Check & nchar(d2$sign_value)>0
signs  = unique(d2[sel,]$sign_value)
set.seed(1211)
cols = sample(rainbow(length(signs)))
names(cols) = signs
plot(rank(d2[sel,]$sign_start),rep(1,sum(sel)), col=cols[d2[sel,]$sign_value], pch=16)
tapply(d$sign_value, d$week, function(X){length(unique(X))})
d$speaker = as.numeric(d$speaker)
d$speakerName = sapply(1:nrow(d),function(X){
d[X,c("part1","part2")][,d$speaker[X]]
})
inventedBy = tapply( d$speakerName, d$sign_value, head,n=1)
d$inventedBy = inventedBy[d$sign_value]
d$IX = grepl("IX",d$sign_notes)
d$OS = grepl("OS",d$sign_notes)
d$LW = grepl("LW",d$sign_notes)
d$SE = grepl("SE",d$sign_notes)
# absolute frequency
d$freq_week_4 = tapply(d[d$week==4,]$sign_value,d[d$week==4,]$sign_value, length)[d$sign_value]
# relative frequency, compared to other competitiors for the same colour
d$freq_week4_withinColour = NA
for(colx in colourNumbers){
d$freq_week4_withinColour[d$trial_value==colx] = 0
dx = d[d$trial_value==colx & d$week==4, ]
tx = table(dx$sign_value)
tx = tx / sum(tx)
d[d$trial_value==colx & d$week==4,]$freq_week4_withinColour = tx[d[d$trial_value==colx & d$week==4,]$sign_value]
}
variants = data.frame()
for(colourID in colourNumbers){
d2 =d[d$trial_value==colourID & nchar(d2[d2$week==1,]$sign_value)>0,]
v = data.frame(colour=colourID, colourName = colourNames[which(colourNumbers==colourID)],sign=unique(d2[d2$week==1,]$sign_value), stringsAsFactors = F)
v$freq_week_1 = table(d2[d2$week==1,]$sign_value)[v$sign]
v$freq_week_4 = table(d2[d2$week==4,]$sign_value)[v$sign]
v$freq_week_1_withinColour = 0
v$freq_week_4_withinColour = 0
signCounts = table(d2[d2$week==1,]$sign_value)
signCounts = signCounts / sum(signCounts)
v[v$sign %in% names(signCounts),]$freq_week_1_withinColour = signCounts[v[v$sign %in% names(signCounts),]$sign]
signCounts = table(d2[d2$week==4,]$sign_value)
signCounts = signCounts / sum(signCounts)
v[v$sign %in% names(signCounts),]$freq_week_4_withinColour = signCounts[v[v$sign %in% names(signCounts),]$sign]
v$iconic = tapply(d2$iconic, d2$sign_value, head,n=1)[v$sign]
v$check = tapply(d2[d2$week==1,]$T0Check,d2[d2$week==1,]$sign_value,function(X){sum(X,na.rm=T)>0})[v$sign]
v$inventedBy= tapply(d2$inventedBy, d2$sign_value, head, n=1)[v$sign]
v$averageLength_week_1 = tapply(d2[d2$week==1,]$sign_length, d2[d2$week==1,]$sign_value, mean)
v$averageTrialLength_week_1 = tapply(d2[d2$week==1,]$trial_length, d2[d2$week==1,]$sign_value, mean)
variants = rbind(variants,v)
}
variants$iconic[is.na(variants$iconic)] = "No"
variants$freq_week_4[is.na(variants$freq_week_4)] = 0
b = read.delim("../data/otherData/SignProperties.tab", sep='\t', encoding = 'utf-8', stringsAsFactors = F)
b[b$Sign=="FOLWER",]$Sign = "FLOWER"
b[b$Sign=="BIGHT",]$Sign = "BRIGHT"
b[b$Sign=="SIGINING",]$Sign = "SIGNING"
b$Sign = gsub("^ ","", b$Sign)
b$Sign = gsub(" $","", b$Sign)
b$Sign = toupper(b$Sign)
variants$BodyAnchor = b[match(variants$sign, b$Sign),]$Body.Anchor
write.csv(variants,file='../data/processedData/variants_summary.csv')
allTargetVars = sort(unique(d[d$trial_value %in% colourNumbers,]$sign_value))
cat(
paste(paste('"',allTargetVars,'"',sep=''),collapse='\n'),
file="../processing/ListOfVariants.txt")
write.csv(d, file="../data/processedData/variants_processed.csv")
dim(d)
head(d)
table(d$iconic)
table(d$Indexicality)
d[d$Indexicality=="",]
d[d$Indexicality=="" & !is.na(d$Indexicality),]
1005268/1000
(1005268/1000)/60
findOverlaps = function(rangesA, rangesB){
# expcets rangesA to be a data frame with columns: name, start, stop
# same for B
ranges <- merge(rangesA,rangesB,by="chrom",suffixes=c("A","B"))
ranges[with(ranges, startB <= startA & stopB >= stopA),]
}
X = d$filename[1]
dx = d[d$filename==X,]
dx = dx[!duplicated(dx$trial_value),]
head(dx)
dim(dx)
dx$trial_value
dx = d[d$filename==X,]
dx = dx[!duplicated(dx$trial_start),]
head(dx)
dim(dx)
rangesA = cbind(dx$trial_value,dx$trial_start,dx$trial_end)
rangesA
rangesA = cbind(dx$trial_value,as.numeric(dx$trial_start),as.numeric(dx$trial_end))
rangesA
as.numeric(dx$trial_start)
rangesA = data.frame(dx$trial_value,as.numeric(dx$trial_start),as.numeric(dx$trial_end),stringsAsFactors = )
rangesA = data.frame(dx$trial_value,as.numeric(dx$trial_start),as.numeric(dx$trial_end),stringsAsFactors = F)
rangesA
rangesA$as.numeric.dx.trial_start.[1]
rangesA$as.numeric.dx.trial_start. + 1
?findInterval()
structure(list(id = c(1, 1, 1, 1, 1), start.cp = c(1, 2, 3, 4,
7), stop.cp = c(2, 3, 4, 7, 12), tvc.start1 = c(2, 2, 2, 2, 2
), tvc.start2 = c(3, 3, 3, 3, 3), tvc.stop1 = c(4, 4, 4, 4, 4
), tvc.stop2 = c(7, 7, 7, 7, 7)), .Names = c("id", "start.cp",
"stop.cp", "tvc.start1", "tvc.start2", "tvc.stop1", "tvc.stop2"),
row.names = c(NA, 5L), class = "data.frame")
tvec <- with(dat, c(start.cp[1], stop.cp))
dat = structure(list(id = c(1, 1, 1, 1, 1), start.cp = c(1, 2, 3, 4,
7), stop.cp = c(2, 3, 4, 7, 12), tvc.start1 = c(2, 2, 2, 2, 2
), tvc.start2 = c(3, 3, 3, 3, 3), tvc.stop1 = c(4, 4, 4, 4, 4
), tvc.stop2 = c(7, 7, 7, 7, 7)), .Names = c("id", "start.cp",
"stop.cp", "tvc.start1", "tvc.start2", "tvc.stop1", "tvc.stop2"),
row.names = c(NA, 5L), class = "data.frame")
tvec <- with(dat, c(start.cp[1], stop.cp))
tvec
dat
findInterval(tvec,      # the "1*" converts to numeric
as.numeric( dat[ 1, c("tvc.start1", "tvc.stop1")]) ,
all.inside=FALSE)
rangesA = cbind(dx$trial_start,dx$trial_end)
rangesA
rangesA+1
?findInterval
findInterval(rangesA[-i], c(rangesA[i,1],rangesA[i,2]))
i = 1
rangesA
findInterval(rangesA[-i], c(rangesA[i,1],rangesA[i,2]))
i = 10
findInterval(rangesA[-i], c(rangesA[i,1],rangesA[i,2]))
sapply(1:nrow(rangesA) function(i){
findInterval(rangesA[-i], c(rangesA[i,1],rangesA[i,2]))
})
sapply(1:nrow(rangesA), function(i){
findInterval(rangesA[-i], c(rangesA[i,1],rangesA[i,2]))
})
which(overlaps==1, aarr.ind = T)
which(overlaps==1, arr.ind = T)
overlaps = sapply(1:nrow(rangesA), function(i){
findInterval(rangesA[-i], c(rangesA[i,1],rangesA[i,2]))
})
which(overlaps==1, arr.ind = T)
rangesA[c(24,6),]
dim(overlaps)
dim(rangesA)
image(overlaps)
rangesA[c(4,6),]
rangesA[c(5,6),]
overlaps = sapply(1:nrow(rangesA), function(i){
findInterval(rangesA[-i,], c(rangesA[i,1],rangesA[i,2]))
})
dim(overlaps)
nrow(rangesA)
i = 1
findInterval(rangesA[-i,], c(rangesA[i,1],rangesA[i,2]))
rangesA[-i,]
findInterval(rangesA[-i,1], c(rangesA[i,1],rangesA[i,2]))
length(findInterval(rangesA[-i,1], c(rangesA[i,1],rangesA[i,2])))
overlaps = sapply(1:nrow(rangesA), function(i){
findInterval(rangesA[,1], c(rangesA[i,1],rangesA[i,2]))
})
which(overlaps==1, arr.ind = T)
findInterval(rangesA[,1], c(rangesA[i,1],rangesA[i,2]))
}) * findInterval(rangesA[,2], c(rangesA[i,1],rangesA[i,2]))
})
findInterval(rangesA[,1], c(rangesA[i,1],rangesA[i,2]))
}) * findInterval(rangesA[,2], c(rangesA[i,1],rangesA[i,2]))
findInterval(rangesA[,1], c(rangesA[i,1],rangesA[i,2]))
* findInterval(rangesA[,2], c(rangesA[i,1],rangesA[i,2]))
findInterval(rangesA[,1], c(rangesA[i,1],rangesA[i,2]))
* findInterval(rangesA[,2], c(rangesA[i,1],rangesA[i,2]))
findInterval(rangesA[,1], c(rangesA[i,1],rangesA[i,2])) *
findInterval(rangesA[,2], c(rangesA[i,1],rangesA[i,2]))
overlaps = sapply(1:nrow(rangesA), function(i){
# if start or end is within range, then findInterval returns 1,
# so multiplying should only return 1 if BOTH are
startO= findInterval(rangesA[,1], c(rangesA[i,1],rangesA[i,2]))
endO = findInterval(rangesA[,2], c(rangesA[i,1],rangesA[i,2]))
(startO==1) | (endO==1)
})
overlaps
dim(findInterval(rangesA[,1], c(rangesA[i,1],rangesA[i,2]))
}))
dim(overlaps)
which(overlaps==1, arr.ind = T)
ret = which(overlaps==1, arr.ind = T)
ret = which(overlaps==1, arr.ind = T)
ret = ret[ret[,1]!=ret[,2]]
ret
rangesA[c(5,6),]
ret = which(overlaps==1, arr.ind = T)
ret = ret[ret[,1]!=ret[,2]]
rangesA[ret,]
X = ret[1,]
ret
ret = which(overlaps==1, arr.ind = T)
ret
ret = ret[ret[,1]!=ret[,2],]
ret
X = ret[1,]
dim(ret)
length(ret)
ret = which(overlaps==1, arr.ind = T)
ret = data.frame(ret[ret[,1]!=ret[,2],])
ret
ret = which(overlaps==1, arr.ind = T)
i = 6
X = 6
c(rangesA[X[1],], rangesA[X[2],])
ret = which(overlaps==1, arr.ind = T)
apply(ret, 1, function(X){
c(rangesA[X[1],], rangesA[X[2],])
})
apply(ret, 1, function(X){
t(c(rangesA[X[1],], rangesA[X[2],]))
})
t(apply(ret, 1, function(X){
c(rangesA[X[1],], rangesA[X[2],])
}))
outer(rangesA[,1],rangesA[,2],">")
t(apply(ret, 1, function(X){
c(rangesA[X[1],], rangesA[X[2],])
}))
ret = which(overlaps==1, arr.ind = T)
ret
ret = data.frame(which(overlaps==1, arr.ind = T))
ret
ret[ret[,1]!=ret[,2]]
ret = data.frame(which(overlaps==1, arr.ind = T))
ret[ret[,1]!=ret[,2],]
ret = data.frame(which(overlaps==1, arr.ind = T))
ret = ret[ret[,1]!=ret[,2],]
t(apply(ret, 1, function(X){
c(rangesA[X[1],], rangesA[X[2],])
}))
ret[(ret[,2] - ret[,3]) == 0,]
ret = data.frame(which(overlaps==1, arr.ind = T))
ret = ret[ret[,1]!=ret[,2],]
ret[(ret[,2] - ret[,3]) == 0,]
ret[,2]
ret[,3]
ret
ret = data.frame(which(overlaps==1, arr.ind = T))
ret = ret[ret[,1]!=ret[,2],]
ret = data.frame(t(apply(ret, 1, function(X){
c(rangesA[X[1],], rangesA[X[2],])
})))
ret[(ret[,2] - ret[,3]) == 0,]
ret = ret[(ret[,2] - ret[,3]) != 0,]
findOverlaps = function(rangesA){
overlaps = sapply(1:nrow(rangesA), function(i){
# if start or end is within range, then findInterval returns 1,
# so multiplying should only return 1 if BOTH are
startO= findInterval(rangesA[,1], c(rangesA[i,1],rangesA[i,2]))
endO = findInterval(rangesA[,2], c(rangesA[i,1],rangesA[i,2]))
(startO==1) | (endO==1)
})
ret = data.frame(which(overlaps==1, arr.ind = T))
ret = ret[ret[,1]!=ret[,2],]
ret = data.frame(t(apply(ret, 1, function(X){
c(rangesA[X[1],], rangesA[X[2],])
})))
ret = ret[(ret[,2] - ret[,3]) != 0,]
return(ret)
}
sapply(d$filename,function(X){
dx = d[d$filename==X,]
dx = dx[!duplicated(dx$trial_start),]
findOverlaps(cbind(dx$trial_start,dx$trial_end))
})
X
dx = d[d$filename==X,]
dx = dx[!duplicated(dx$trial_start),]
cbind(dx$trial_start,dx$trial_end)
dim(dx)
dx = d[d$filename==X,]
dim(dx)
table(d$filename)
dim(d)
X = d$filename[1]
X
dx = d[d$filename==X,]
dx = dx[!duplicated(dx$trial_start),]
findOverlaps(cbind(dx$trial_start,dx$trial_end))
sapply(d$filename,function(X){
dx = d[d$filename==X,]
dx = dx[!duplicated(dx$trial_start),]
findOverlaps(cbind(dx$trial_start,dx$trial_end))
})
findOverlaps = function(rangesA){
overlaps = sapply(1:nrow(rangesA), function(i){
# if start or end is within range, then findInterval returns 1,
# so multiplying should only return 1 if BOTH are
startO= findInterval(rangesA[,1], c(rangesA[i,1],rangesA[i,2]))
endO = findInterval(rangesA[,2], c(rangesA[i,1],rangesA[i,2]))
(startO==1) | (endO==1)
})
ret = data.frame(which(overlaps==1, arr.ind = T))
ret = ret[ret[,1]!=ret[,2],]
if(nrow(ret)==0){
return(NA)
}
ret = data.frame(t(apply(ret, 1, function(X){
c(rangesA[X[1],], rangesA[X[2],])
})))
ret = ret[(ret[,2] - ret[,3]) != 0,]
return(ret)
}
findOverlaps(cbind(dx$trial_start,dx$trial_end))
sapply(d$filename,function(X){
dx = d[d$filename==X,]
dx = dx[!duplicated(dx$trial_start),]
findOverlaps(cbind(dx$trial_start,dx$trial_end))
})
sapply(unique(d$filename),function(X){
dx = d[d$filename==X,]
dx = dx[!duplicated(dx$trial_start),]
findOverlaps(cbind(dx$trial_start,dx$trial_end))
})
findOverlaps = function(rangesA){
overlaps = sapply(1:nrow(rangesA), function(i){
# if start or end is within range, then findInterval returns 1,
# so multiplying should only return 1 if BOTH are
startO= findInterval(rangesA[,1], c(rangesA[i,1],rangesA[i,2]))
endO = findInterval(rangesA[,2], c(rangesA[i,1],rangesA[i,2]))
(startO==1) | (endO==1)
})
ret = data.frame(which(overlaps==1, arr.ind = T))
ret = ret[ret[,1]!=ret[,2],]
if(nrow(ret)==0){
return(NA)
}
ret = data.frame(t(apply(ret, 1, function(X){
c(rangesA[X[1],], rangesA[X[2],])
})))
ret = ret[(ret[,2] - ret[,3]) != 0,]
names(ret) = c("TrialA_start","TrialA_end","TrialB_start","TrialB_end")
return(ret)
}
sapply(unique(d$filename),function(X){
dx = d[d$filename==X,]
dx = dx[!duplicated(dx$trial_start),]
findOverlaps(cbind(dx$trial_start,dx$trial_end))
})
overlaps = sapply(unique(d$filename),function(X){
dx = d[d$filename==X,]
dx = dx[!duplicated(dx$trial_start),]
findOverlaps(cbind(dx$trial_start,dx$trial_end))
})
overlaps[!is.na(overlaps)]
(23234/1000)/60
(550090/1000)/60
